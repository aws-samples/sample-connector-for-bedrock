AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AWS CloudFormation template for deploying BRConnector using ECS Fargate, CloudFront and RDS
  refer: https://github.com/aws-samples/sample-connector-for-bedrock
Metadata:
  LICENSE: MIT-0 License
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: "VPC settings for BRConnector"
      - Parameters:
          - NewVpc
          - VpcId
          - PublicSubnet1Id
          - PublicSubnet2Id
          - PrivateSubnet1Id
          - PrivateSubnet2Id
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR

      - Label: 
          default: "Compute settings for ECS Fargate"
      - Parameters:
          - FargateCpu
          - FargateMemory

      - Label: 
          default: "Settings for RDS PostgreSQL"
      - Parameters:
          - DatabaseMode
          - PGDatabase
          - PGUser
          - PGPassword

      - Label: 
          default: "Others Settings"
      - Parameters:
          - BRConnectorVersion
          - AutoUpdateBRConnector
          - PerformanceMode

Parameters:
  NewVpc:
    Description: Create a new VPC
    Type: String
    AllowedValues:
      - true
      - false
    Default: true

  VpcId:
    Description: select VPC 
    Type: String
    AllowedPattern: '(^$|^vpc-[a-z0-9]+$)'
  
  PublicSubnet1Id:
    Description: select first PUBLIC subnet (for ALB)
    Type: String
    AllowedPattern: '(^$|^subnet-[a-z0-9]+$)'
  
  PublicSubnet2Id:
    Description: select second PUBLIC subnet (for ALB)
    Type: String
    AllowedPattern: '(^$|^subnet-[a-z0-9]+$)'
  
  PrivateSubnet1Id:
    Description: select first PRIVATE subnet (for ECS Fargate and RDS)
    Type: String
    AllowedPattern: '(^$|^subnet-[a-z0-9]+$)'
  
  PrivateSubnet2Id:
    Description: select second PRIVATE subnet (for ECS Fargate and RDS)
    Type: String
    AllowedPattern: '(^$|^subnet-[a-z0-9]+$)'

  # VPC Configuration Parameters
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.200.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.200.0.0/20

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.200.16.0/20

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.200.32.0/20

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.200.48.0/20

  FargateCpu:
    Description: CPU units for the ECS Fargate task
    Type: Number
    Default: 1024
    AllowedValues: [512, 1024, 2048, 4096]

  FargateMemory:
    Description: Memory (MB) for the ECS Fargate task
    Type: Number
    Default: 2048
    AllowedValues: [1024, 2048, 3072, 4096, 5120, 6144, 7168, 8192]

  DatabaseMode:
    Description: >-
      Choose database mode:
      'Standalone' - Deploy RDS PostgreSQL
      'NoDB' - Do not deploy any backend database, in this mode only ADMIN KEY could access default models
    Type: String
    AllowedValues:
      - Standalone
      - NoDB
    Default: Standalone

  PGDatabase:
    Description: PostgreSQL default database name
    Type: String
    Default: brconnector_db
  
  PGUser:
    Description: PostgreSQL default user name
    Type: String
    Default: postgres
  
  PGPassword:
    Description: PostgreSQL default password
    Type: String
    Default: mysecretpassword
    NoEcho: true

  BRConnectorVersion:
    Description: choose BR Connector Version
    Type: String
    AllowedValues:
      - latest
      - "0.0.19"
      - "0.0.16"
      - "0.0.15"
    Default: latest

  AutoUpdateBRConnector:
    Description: Auto update BRConnector image to newest version
    Type: String
    AllowedValues:
      - true
      - false
    Default: true

  PerformanceMode:
    Description: If set to true, chat history will not be saved. 
    Type: String
    AllowedValues:
      - true
      - false
    Default: false

Conditions:
  IsNewVpc: !Equals [!Ref NewVpc, 'true']
  IsNoDB: !Equals [!Ref DatabaseMode, 'NoDB']
  DeployDB: !Not [!Condition IsNoDB]
  IsAutoUpdate: !Equals [!Ref AutoUpdateBRConnector, 'true']

Resources:
  # Integrated VPC Resources from brconnector-vpc-cfn.yaml
  VPC:
    Condition: IsNewVpc
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "BRCVPC-${AWS::StackName}"

  InternetGateway:
    Condition: IsNewVpc
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "BRCVPC-${AWS::StackName}"

  InternetGatewayAttachment:
    Condition: IsNewVpc
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Condition: IsNewVpc
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "BRCVPC-${AWS::StackName} Public Subnet (AZ1)"

  PublicSubnet2:
    Condition: IsNewVpc
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "BRCVPC-${AWS::StackName} Public Subnet (AZ2)"

  PrivateSubnet1:
    Condition: IsNewVpc
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "BRCVPC-${AWS::StackName} Private Subnet (AZ1)"

  PrivateSubnet2:
    Condition: IsNewVpc
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "BRCVPC-${AWS::StackName} Private Subnet (AZ2)"

  NatGateway1EIP:
    Condition: IsNewVpc
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Condition: IsNewVpc
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Condition: IsNewVpc
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "BRCVPC-${AWS::StackName} Public Routes"

  DefaultPublicRoute:
    Condition: IsNewVpc
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Condition: IsNewVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Condition: IsNewVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Condition: IsNewVpc
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "BRCVPC-${AWS::StackName} Private Routes (AZ1)"

  DefaultPrivateRoute1:
    Condition: IsNewVpc
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Condition: IsNewVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Condition: IsNewVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Condition: IsNewVpc
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  # Random string generator for unique names
  RandomString:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt RandomStringLambda.Arn
      RandomLength: 12

  RandomStringLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import random
          import string
          import cfnresponse
          import json
          
          def handler(event, context):
              status = cfnresponse.SUCCESS
              try:
                  random_length = int(event['ResourceProperties']['RandomLength'])
                  random_string = ''.join(random.choices(string.ascii_lowercase, k=random_length))
                  cfnresponse.send(event, context, status, {}, random_string)
              except Exception as e:
                  status = cfnresponse.FAILED
                  cfnresponse.send(event, context, status, {}, str(e))

      Handler: index.handler
      Runtime: python3.11
      Role: !GetAtt RandomStringLambdaExecutionRole.Arn

  RandomStringLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "alb-security-group-${AWS::StackName}"
      GroupDescription: "Security Group for ALB"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !If [ IsNewVpc, !Ref VPC, !Ref VpcId ]

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "ecs-security-group-${AWS::StackName}"
      GroupDescription: "Security Group for ECS"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8866
          ToPort: 8866
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      VpcId: !If [ IsNewVpc, !Ref VPC, !Ref VpcId ]

  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "rds-security-group-${AWS::StackName}"
      GroupDescription: "Security Group for RDS"
      VpcId: !If [ IsNewVpc, !Ref VPC, !Ref VpcId ]

  RdsSecurityGroupIngressFromECS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RdsSecurityGroup
      IpProtocol: "tcp"
      FromPort: "5432"
      ToPort: "5432"
      SourceSecurityGroupId: !Ref ECSSecurityGroup

  # RDS PostgreSQL
  MyPGParameterGroup:
    Condition: DeployDB
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: "PostgreSQL Parameter Group for BRConnector"
      Family: "postgres16"
      Parameters:
        rds.force_ssl: "0"

  MyPGSubnetGroup:
    Condition: DeployDB
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnets available for the RDS PostgreSQL instance"
      SubnetIds:
        - !If [ IsNewVpc, !Ref PrivateSubnet1, !Ref PrivateSubnet1Id ]
        - !If [ IsNewVpc, !Ref PrivateSubnet2, !Ref PrivateSubnet2Id ]

  MyPG:
    Condition: DeployDB
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '20'
      DBName: !Ref PGDatabase
      DBInstanceClass: db.t4g.small
      Engine: postgres
      EngineVersion: "16.3"
      MasterUsername: !Ref PGUser
      MasterUserPassword: !Ref PGPassword
      DBParameterGroupName: !Ref MyPGParameterGroup
      VPCSecurityGroups:
        - !Ref RdsSecurityGroup
      DBSubnetGroupName: !Ref MyPGSubnetGroup

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "BRConnector-ECSCluster-${AWS::StackName}"
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT

  # IAM Role for ECS Task Execution
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # IAM Role for ECS Task
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Sid: InvokeModel
                Action:
                - 'bedrock:InvokeModelWithResponseStream'
                - 'bedrock:InvokeModel'
                Resource: 
                - 'arn:aws:bedrock:*::foundation-model/*'
                - 'arn:aws:bedrock:*:*:inference-profile/*'
              - Effect: Allow
                Sid: ListFM
                Action:
                - 'bedrock:ListFoundationModels'
                Resource: '*'
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Sid: SSMPutParameter
                Action:
                - 'ssm:PutParameter'
                - 'ssm:GetParameter'
                - 'ssm:GetParameters'
                Resource: 'arn:aws:ssm:*:*:parameter/*'

  # Admin API Key parameter
  MySSMParameterAdminKey:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ["", ["/brconnector/admin-key-", !Ref AWS::StackName]]
      Type: String
      Value: !Sub "${RandomString}"
      Description: "Admin API Key for BRConnector"
      Tier: Standard
      DataType: text

  # First User API Key parameter
  MySSMParameterFirstUserKey:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ["", ["/brconnector/first-user-key-", !Ref AWS::StackName]]
      Type: String
      Value: "To be generated during ECS Task startup"
      Description: "First User API Key for BRConnector"
      Tier: Standard
      DataType: text

  # ECS Task Definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "BRConnector-Task-${AWS::StackName}"
      Cpu: !Ref FargateCpu
      Memory: !Ref FargateMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: brconnector
          Image: !Sub "public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock:${BRConnectorVersion}"
          Essential: true
          PortMappings:
            - ContainerPort: 8866
              HostPort: 8866
              Protocol: tcp
          Environment:
            - Name: AWS_DEFAULT_REGION
              Value: !Ref "AWS::Region"
            - Name: PERFORMANCE_MODE
              Value: !Ref PerformanceMode
            - Name: ADMIN_API_KEY
              Value: !GetAtt MySSMParameterAdminKey.Value
            - Name: PGSQL_HOST
              Value: !If [IsNoDB, "", !If [DeployDB, !GetAtt MyPG.Endpoint.Address, ""]]
            - Name: PGSQL_DATABASE
              Value: !If [IsNoDB, "", !Ref PGDatabase]
            - Name: PGSQL_USER
              Value: !Ref PGUser
            - Name: PGSQL_PASSWORD
              Value: !Ref PGPassword
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: brconnector

  # CloudWatch Logs Group
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/brconnector-${AWS::StackName}"
      RetentionInDays: 30

  # Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "BRConnector-ALB-${AWS::StackName}"
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !If [IsNewVpc, !Ref PublicSubnet1, !Ref PublicSubnet1Id]
        - !If [IsNewVpc, !Ref PublicSubnet2, !Ref PublicSubnet2Id]

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Target Group
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Port: 8866
      Protocol: HTTP
      TargetType: ip
      VpcId: !If [IsNewVpc, !Ref VPC, !Ref VpcId]

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub "BRConnector-Service-${AWS::StackName}"
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !If [IsNewVpc, !Ref PrivateSubnet1, !Ref PrivateSubnet1Id]
            - !If [IsNewVpc, !Ref PrivateSubnet2, !Ref PrivateSubnet2Id]
      LoadBalancers:
        - ContainerName: brconnector
          ContainerPort: 8866
          TargetGroupArn: !Ref ALBTargetGroup

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: ALBOrigin
            DomainName: !GetAtt ApplicationLoadBalancer.DNSName
            CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
        Enabled: true
        Comment: "CloudFront distribution for BRConnector ECS"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          TargetOriginId: ALBOrigin
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Disable caching
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # Allow all Viewer
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # Auto Update Resources
  ECREventRule:
    Condition: IsAutoUpdate
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "brconnector-image-update-${AWS::StackName}"
      Description: "Rule to detect updates to the BRConnector Docker image"
      ScheduleExpression: "rate(1 day)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt UpdateImageLambda.Arn
          Id: "UpdateBRConnectorImage"

  UpdateImageLambda:
    Condition: IsAutoUpdate
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt UpdateImageLambdaRole.Arn
      Runtime: python3.11
      Timeout: 300
      Environment:
        Variables:
          ECS_CLUSTER: !Ref ECSCluster
          ECS_SERVICE: !Ref ECSService
          TASK_DEFINITION_ARN: !Ref ECSTaskDefinition
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          
          def handler(event, context):
              cluster = os.environ['ECS_CLUSTER']
              service = os.environ['ECS_SERVICE']
              task_def_arn = os.environ['TASK_DEFINITION_ARN']
              
              # Get latest image tag
              ecr_client = boto3.client('ecr-public', region_name='us-east-1')
              ecs_client = boto3.client('ecs')
              
              # Force new deployment to update the image
              response = ecs_client.update_service(
                  cluster=cluster,
                  service=service,
                  forceNewDeployment=True
              )
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Service update triggered')
              }

  UpdateImageLambdaRole:
    Condition: IsAutoUpdate
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ECSUpdateAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:UpdateService'
                  - 'ecs:DescribeServices'
                  - 'ecs:RegisterTaskDefinition'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ecr-public:DescribeImages'
                Resource: '*'

  EventsRulePermission:
    Condition: IsAutoUpdate
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UpdateImageLambda
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ECREventRule.Arn

Outputs:
  VpcId:
    Condition: IsNewVpc
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnetId:
    Condition: IsNewVpc
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PrivateSubnet1Id:
    Condition: IsNewVpc
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2Id:
    Condition: IsNewVpc
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Condition: IsNewVpc
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup

  CloudFrontURL:
    Description: "BRConnector CloudFront URL"
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
  
  CloudFrontManagerURL:
    Description: "BRConnector Manager URL"
    Value: !Sub "https://${CloudFrontDistribution.DomainName}/manager"
  
  CloudFrontBrclientURL:
    Description: "BRClient WebUI URL"
    Value: !Sub "https://${CloudFrontDistribution.DomainName}/brclient"
  
  LoadBalancerURL:
    Description: "Load Balancer URL"
    Value: !Sub "http://${ApplicationLoadBalancer.DNSName}"
  
  AdminApiKey:
    Description: "Admin API Key for BRConnector"
    Value: !GetAtt MySSMParameterAdminKey.Value
  
  RDSEndpoint:
    Condition: DeployDB
    Description: "RDS PostgreSQL Endpoint"
    Value: !GetAtt MyPG.Endpoint.Address
