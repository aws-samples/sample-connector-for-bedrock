{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sample Connector for Bedrock","text":"<p>Integrating AWS Generative AI is now easy!</p> <p>Start with the link below:</p> <ul> <li> <p>Quick start</p> </li> <li> <p>Deploy using Cloudformation</p> </li> <li> <p>Development</p> </li> </ul>"},{"location":"home/","title":"Introduction","text":"<p>This project is an Amazon Bedrock and other large language model or application forwarding tool. It can manage virtual API Keys, record chat logs, and manage costs.</p> <p>It is compatible with any OpenAI client that can define a Host and API key.</p>"},{"location":"home/#main-features","title":"Main Features","text":""},{"location":"home/#supported-models-and-platforms","title":"Supported Models and Platforms","text":"<ul> <li>Supports all current and future large language models from Bedrock (supported through bedrock-converse).</li> <li>Supports models deployed through Sagemaker LMI (partial models).</li> <li>Supports other forms of custom models, including Ollama, etc.</li> <li>More AI workflow applications, such as internet search, AWS command executors, etc.</li> </ul>"},{"location":"home/#api-key-and-cost-management","title":"API Key and Cost Management","text":"<ul> <li>Create API keys. Keys can be created for regular users and administrators. Regular users can chat, while administrators can manage API keys and costs.</li> <li>Record the cost of each call and use it as a basis for cost control.</li> <li>Cost control. You can set monthly quotas and account balances for each API key. When the monthly quota or account balance is insufficient, it cannot be used.</li> <li>Calculate the overall cost.</li> </ul> <p>You can customize model prices. Please refer to the official website for the Bedrock pricing.</p> <p>Warning</p> <p>The cost calculation of this project cannot be used as the basis for AWS billing. Please refer to the AWS bill for actual expenses.</p> <p></p>"},{"location":"home/#model-management","title":"Model Management","text":"<p>Models and their parameters can be defined from the backend. See Models management</p> <p>Once defined, models can be bound to groups or API Keys.</p> <p></p>"},{"location":"home/changelogs/","title":"Change Logs","text":""},{"location":"home/changelogs/#0010","title":"0.0.10","text":"<p>2024-07-24</p>"},{"location":"home/deployment/","title":"Quick Deployment","text":"<p>Use CloudFormation for quick deployment.</p>"},{"location":"home/deployment/#supported-region","title":"Supported Region","text":"<p>Cloudformation template are verified in following regions:</p> <ul> <li>us-east-1</li> <li>us-west-2</li> </ul>"},{"location":"home/deployment/#prerequisites","title":"Prerequisites","text":"<p>Enable Claude 3 Sonnet or Haiku in your region - If you are new to using Anthropic models, go to the\u00a0Amazon Bedrock console\u00a0and choose\u00a0Model access\u00a0on the bottom left pane. Request access separately for Claude 3 Sonnet or Haiku.</p>"},{"location":"home/deployment/#components","title":"Components","text":"<p>Following key components will be included in this Cloudformation template:</p> <ul> <li>Cloudfront</li> <li>BRConnector on Lambda or EC2</li> <li>RDS PostgreSQL or PostgreSQL container on EC2</li> <li>ECR with pull through cache enabled</li> </ul>"},{"location":"home/deployment/#deploy-guide","title":"Deploy Guide","text":"<ul> <li>Download quick-build-brconnector.yaml and upload to Cloudformation console or click this button to launch directly.</li> </ul> <ul> <li>VPC parameters</li> <li>Choose to create a new VPC or a existing VPC</li> <li>Choose one PUBLIC subnet for EC2 and two PRIVATE subnets for Lambda and RDS (subnet group need 2 AZ at least)</li> </ul> <ul> <li>Compute parameters</li> <li>Choose ComputeType for BRConnector, Lambda or EC2</li> <li>For EC2 settings<ul> <li>Now only support Amazon Linux 2023</li> <li>You could choose to create PostgreSQL as container in same EC2 (<code>StandaloneDB</code> to false), or create standalone RDS PostgreSQL as backend (<code>StandaloneDB</code> to true)</li> </ul> </li> <li>For Lambda settings<ul> <li>PUBLIC Function URL will be used. Please ensure this security setting is acceptable</li> <li>Define your private repository name prefix string</li> <li>Always create RDS PostgreSQL (<code>StandaloneDB</code> to true)</li> </ul> </li> </ul> <ul> <li>PostgreSQL parameters</li> <li>Default PostgreSQL password is <code>mysecretpassword</code></li> <li>If you choose <code>StandaloneDB</code> to false, PostgreSQL will running on EC2 as container. RDS PostgreSQL will be create if this option is true.</li> <li>Keep others as default</li> </ul> <ul> <li>Debugging parameters</li> <li>If you choose Lambda as ComputeType, you could choose to delete EC2 after all resources deploy successfully. This EC2 is used for compiling and building BRConnector container temporarily.</li> <li>Don\u2019t delete EC2 if you choose EC2 as ComputeType</li> <li>If you set <code>true</code> to AutoUpdateBRConnector, one script will be add to ec2 crontab</li> </ul> <ul> <li>Until deploy successfully, go to output page and copy Cloudfront URL and first user key to your bedrock client settings page.</li> </ul> <ul> <li>Also you could connect to <code>BRConnector</code> EC2 instance with SSM Session Manager (docs)</li> </ul>"},{"location":"home/deployment/#update-brconnector","title":"Update BRConnector","text":""},{"location":"home/deployment/#autoupdate-is-true","title":"AutoUpdate is true","text":"<ul> <li>Check your ECR settings, if has rules in pull through cache page, you have enabled this feature to update ECR image with upstream repo automatically.</li> <li>Go to codebuild page, one project will be triggered to build regularly to update your lambda image automatically</li> <li>Images in EC2 will be updated using state manager in SSM automatically.</li> </ul>"},{"location":"home/deployment/#autoupdate-is-false","title":"AutoUpdate is false","text":"<ul> <li>Check your ECR settings, if has rules in pull through cache page, you have enabled this feature to update ECR image with upstream repo automatically.</li> <li>Go to codebuild page, one project could be triggered to update your lambda image manually. Click <code>Start build</code> to update lambda image.</li> <li>Images in EC2 will NOT be updated using state manager in SSM automatically due to no association created. Reference document in SSM to execute commands in EC2 manually.</li> </ul>"},{"location":"home/deployment/#ecr-without-pull-through-cache-enabled-only-for-previous-cfn-version","title":"ECR without pull through cache enabled (only for previous cfn version)","text":"<ul> <li>following this script to update image manually if you do not enable ECR pull through cache</li> </ul> <pre><code>export AWS_DEFAULT_REGION=us-west-2\nexport ACCOUNT_ID=00000000000000\nexport PrivateECRRepository=your_private_repo_name\n\naws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com\n\n# pull/tag/push arm64 image for lambda\ndocker pull --platform=linux/arm64 public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock-lambda\ndocker tag public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock-lambda ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:arm64\ndocker push ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:arm64\n\n# pull/tag/push amd64 image for lambda\ndocker pull --platform=linux/amd64 public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock-lambda\ndocker tag public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock-lambda ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:amd64\ndocker push ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:amd64\n\n# create/push manifest file\ndocker manifest create ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:latest --amend ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:arm64 --amend ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:amd64\ndocker manifest annotate ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:latest ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:arm64 --os linux --arch arm64\ndocker manifest annotate ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:latest ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:amd64 --os linux --arch amd64\ndocker manifest push ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:latest\n</code></pre> <ul> <li>update lambda image with correct architecture</li> <li>or login to ec2 to update local image and restart brconnector container</li> </ul>"},{"location":"home/deployment/#migrating-to-new-postgresql-database","title":"Migrating to new PostgreSQL database","text":"<p>You could choose to deploy PostgreSQL in container on ECR or in RDS directly, here list some command for your reference to migrate your data in PG.</p>"},{"location":"home/deployment/#migrating-brconnector-data-from-pg-container-on-ec2-to-rds","title":"Migrating BRConnector data from PG container on EC2 to RDS","text":"<ul> <li> <p>list your database name <pre><code>docker exec -it postgres psql -U postgres\npostgres=&gt; \\l # list databases\n</code></pre></p> </li> <li> <p>dump db <pre><code>docker exec -i postgres pg_dump -U postgres -d brproxy_dbname -a &gt; db.sql\n</code></pre></p> </li> <li> <p>Find your PG endpoint in RDS</p> </li> <li> <p>we will run a docker on your local as postgres client temporarily, instead of install postgresql <pre><code>POSTGRES_VERSION=16\ndocker run --name postgres-client \\\n    -e POSTGRES_PASSWORD=postgres-client-tmp-password \\\n    -d postgres:${POSTGRES_VERSION}\n</code></pre></p> </li> <li> <p>import to brconnector_db  <pre><code>docker exec -i postgres-client \\\n    psql -U postgres -h pg-endpoint.xxx.us-west-2.rds.amazonaws.com \\\n    -d brconnector_db &lt; db.sql\n</code></pre></p> </li> <li> <p>clean temporary docker on local <pre><code>docker rm -f postgres-client\n</code></pre></p> </li> </ul>"},{"location":"home/deployment/#migrating-brconnector-data-from-pg-container-on-ec2-to-new-ec2","title":"Migrating BRConnector data from PG container on EC2 to new EC2","text":"<ul> <li> <p>list your database name <pre><code>docker exec -it postgres psql -U postgres\npostgres=&gt; \\l # list databases\n</code></pre></p> </li> <li> <p>dump db <pre><code>docker exec -i postgres pg_dump -U postgres -d brproxy_dbname -a &gt; db.sql\n</code></pre></p> </li> <li> <p>import to brconnector_db <pre><code>docker exec -i postgres psql -U postgres -d brconnector_db &lt; db.sql\n</code></pre></p> </li> </ul>"},{"location":"home/quick-start/","title":"Quick start","text":""},{"location":"home/quick-start/#1-prepare-a-server-to-host-the-connector","title":"1. Prepare a server to host the connector","text":"<p>Launch an EC2 on AWS or any other server with docker support.</p>"},{"location":"home/quick-start/#2-run-postgres-with-docker","title":"2. Run Postgres with docker","text":"<p>Launch a docker container to host postgres with the following shell command:</p> <pre><code>docker run --name postgres \\\n  -e POSTGRES_PASSWORD=mysecretpassword \\\n  -p 5432:5432 \\\n  -d postgres\n</code></pre> <p>Then create a database named <code>brconnector_db</code> with the following command.</p> <p>At first, attach to the prostgress container:</p> <pre><code>docker exec -it postgres psql -U postgres\n</code></pre> <p>Then, in the SQL command line of postgres, run the following command to create the database:</p> <pre><code>CREATE DATABASE brconnector_db;\n</code></pre> <p>The database name is not necessary to be <code>brconnector_db</code>, you can use what ever valid database name you want.</p> <p>If you use your own database name, make sure that you remember the database name and replace <code>brconnector_db</code> with your database name.</p>"},{"location":"home/quick-start/#3-start-the-connector-server-with-docker","title":"3. Start the connector server with docker","text":"<p>Run the following docker command directly to start the connector container.</p> <p>Make sure to replace the value of access key, secret key, region to be right ones.</p> <p>And, important! replace the value of ADMIN_API_KEY to be a complex key instead of using the simple one in the sample.</p> <pre><code>docker run --name brconnector \\\n --restart always --pull always \\\n -p 8866:8866 \\\n -e AWS_ACCESS_KEY_ID=xxxx \\\n -e AWS_SECRET_ACCESS_KEY=xxxxx \\\n -e AWS_DEFAULT_REGION=us-east-1 \\\n -e PGSQL_HOST=172.17.0.1 \\\n -e PGSQL_DATABASE=brconnector_db \\\n -e PGSQL_USER=postgres \\\n -e PGSQL_PASSWORD=mysecretpassword \\\n -e ADMIN_API_KEY=br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \\\n -d cloudbeer/sample-connector-for-bedrock\n</code></pre>"},{"location":"home/quick-start/#4-test-the-connector-server","title":"4. Test the connector server","text":"<p>Now, you have the first admin user with the API_KEY \u201cbr_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u201d.</p> <p>And the server export port 8866 to the hosting EC2.</p> <p>Test the server with the API_Key using <code>curl</code> command:</p> <pre><code>curl \"http://localhost:8866/admin/api-key/list\" \\\n  -H \"Authorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" \n</code></pre> <p>You will get something like the following if every things go well:</p> <pre><code>{\"success\":true,\"data\":{\"items\":[],\"total\":\"0\",\"limit\":20,\"offset\":0}}\n</code></pre>"},{"location":"home/quick-start/#5-creat-the-first-admin-user","title":"5. Creat the first admin user","text":"<p>The API_KEY configed above is only used for booting the server and create first admin user.</p> <p>This API_KEY is not designed to be used as admin user or normal user.</p> <p>Create the first admin user with the following command:</p> <pre><code>curl -X POST \"http://localhost:8866/admin/api-key/apply\" \\\n     -H \"Content-Type: application/json\" \\\n     -H \"Authorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" \\\n     -d '{\"name\": \"adminuser\",\"group_id\": 1,\"role\": \"admin\",\"email\": \"\", \"month_quota\":\"20\"}'\n</code></pre> <p>You will get some response like the following:</p> <pre><code>{\"success\":true,\"data\":{\"id\":1,\"name\":\"adminuser\",\"email\":\"\",\"api_key\":\"br-someotherkeyvaluexxxxx\",\"role\":\"admin\",\"month_quota\":\"20.0000000000\",\"balance\":\"0.0000000000\"}}\n</code></pre> <p>Record the new api_key for the new user, this api_key can be used to config your client to chat. and this api_key can be used to login the connector\u2019s manager WebUI to manage other api_key.</p>"},{"location":"home/quick-start/#6-config-client-to-connect-to-the-connector-server","title":"6. Config client to connect to the connector server","text":"<p>You should expose the connector server with HTTPS.</p> <p>One simple way to do it on AWS is creating a CloudFront CDN to provide SSL support.</p> <p>For more information about setting up CloudFront on AWS, please refer to official document of AWS.</p> <p>Open a client that can define Host and API Key for OpenAI.</p> <p>In Host field enter the CloudFront url.</p> <p>In the \u201cAPK Key\u201d field, enter the API_Key of your first admin user, which is the one you created in step 5.</p> <p>Then, open a new chat to test.</p> <p>If every thing goes well, you can start to chat.</p> <p>Note</p> <p>You can use the sample client provided by https://github.com/aws-samples/sample-client-for-amazon-bedrock to test this project, View how to config.</p> <p>Since 0.0.8, this client has been built into the docker image. The access address is: <code>http(s)://your-endpoint/brclient/</code></p>"},{"location":"home/quick-start/#7-the-connectors-webui","title":"7. The connector\u2019s WebUI","text":"<p>If you have not set the environment variable DISABLE_UI, you can now access the BRConnector WebUI via https://your-endpoint/manager.</p> <p>You can log in and manage it using the API key you just generated. Enter https://your-endpoint as the Host.</p>"},{"location":"providers/aws-executor/","title":"aws-executor","text":"<p>Since Docker image version 0.0.10</p> <p>An AWS command executor.</p> <p>With this Provider, you can execute AWS command using natural language and get the execution results.</p> <p>The role for executing AWS commands and the role for running BRConnector are currently the same, so you need to grant the appropriate permissions to the current role.</p> <p>Warning</p> <p>Do not grant write permissions to critical resources, as the command lines parsed by the current AI are not stable. However, you can still refer to the command lines suggested by the AI.</p>"},{"location":"providers/aws-executor/#model-configuration","title":"Model configuration","text":"<p>The parameter configuration is as follows:</p> <p>Name: some-model</p> <p>Provider: aws-executor</p> <p>Configuration:</p> <pre><code>{\n  \"localLlmModel\": \"claude-3-sonnet\"\n}\n</code></pre> <p>localLlmModel must be configured as a model that supports function calling and already exists in BRConnector.</p> <p>Note</p> <p>You need to configure a claude3+ model provided by the bedrock-converse provider, as other models do not yet have the capability for function calling. The early default claude3 model in the system is not driven by converse. If you use these models, you need to update the original configuration to the bedrock-converse provider. Please note to modify the key \u2018model_id\u2019 to \u2018modelId\u2019.</p> <p>And You must install aws cli v2 in the BRConnector host.</p>"},{"location":"providers/aws-executor/#screenshots-in-brclient","title":"Screenshots in BRClient","text":""},{"location":"providers/bedrock-converse/","title":"bedrock-converse","text":"<p>Since Docker image version 0.0.6</p> <p>LLM Consistent Interface.</p> <p>Sends messages to the specified Amazon Bedrock model.\u00a0<code>Converse</code>\u00a0provides a consistent interface that works with all models that support messages. This allows you to write code once and use it with different models. If a model has unique inference parameters, you can also pass those unique parameters to the model.</p>"},{"location":"providers/bedrock-converse/#configuration","title":"Configuration","text":"<p>Invoke model via Amazon Bedrock Converse API. You can config all supported models with this provider.</p> <p>This page explains how to use Bedrock Converse API, and what features it supports.</p> <p>It is recommended to use this provider, which can uniformly configure Bedrock models and support function calling.</p> Key Type Required Default value Description modelId string Y Model id, See Bedrock doc regions string[] or string N [\u201cus-east-1\u201d] If you have applied and specified multiple regions, then a region will be randomly selected for the call. This feature can effectively alleviate performance bottlenecks. <p>The configuration example:</p> <pre><code>{\n  \"modelId\": \"anthropic.claude-3-sonnet-20240229-v1:0\",\n  \"regions\": [\n    \"us-east-1\",\n    \"us-west-2\"\n  ]\n}\n</code></pre>"},{"location":"providers/bedrock-knowledge-base/","title":"bedrock-knowledge-base","text":"<p>Knowledge Bases for Amazon Bedrock.</p>"},{"location":"providers/bedrock-knowledge-base/#create-a-knowledge-bases-for-bedrock-instance","title":"Create a Knowledge Bases for Bedrock instance","text":"<p>Refer to this document: Create a knowledge base</p>"},{"location":"providers/bedrock-knowledge-base/#model-configuration","title":"Model Configuration","text":"<pre><code>{\n  \"region\": \"&lt;your-region&gt;\",\n  \"summaryModel\": \"claude-3-sonnet\",\n  \"knowledgeBaseId\": \"&lt;your-kb-id&gt;\"\n}\n</code></pre> <ul> <li>knowledgeBaseId: the knowledge base id.</li> <li>summaryModel: support claude-3-sonnet, claude-3-haiku or claude-3-opus</li> </ul>"},{"location":"providers/bedrock-knowledge-base/#api-calls","title":"API Calls","text":"<p>You can use normal api invoke, the Bedrock connector will pop last message to chat with the knowledge base.</p> <pre><code>POST /v1/chat/completions\nContent-Type: application/json\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n{\n  \"model\": \"your-custom-model-name\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"how to protect s3 data?\"\n    }\n  ]\n}\n</code></pre>"},{"location":"providers/bedrock-knowledge-base/#use-brclient","title":"Use BRClient","text":""},{"location":"providers/introduction/","title":"Using Provider","text":"<p>A Provider is used to provide services to the outside world through a Model.</p> <p>First, you need to create a new model.</p> <p>Select the corresponding Provider from the dropdown list.</p> <p>Different Providers will correspond to different configurations.</p> <p>This section will specifically describe the configuration for each model.</p>"},{"location":"providers/ollama/","title":"ollama","text":"<p>You can deploy native model with Ollama, This provider can adapt to the API of Ollama.</p> <p>For more information, visit https://github.com/ollama/ollama/.</p>"},{"location":"providers/ollama/#configuration","title":"Configuration","text":"<pre><code>{\n  \"host\": \"http://localhost:11434\",\n  \"model\": \"phi3\"\n}\n</code></pre> Key Type Required Default value Description host string Y Ollama\u2019s host address model string Y Model id. See Ollama doc"},{"location":"providers/painter/","title":"painter","text":"<p>Since Docker image version 0.0.9</p> <p>Draw using the bedrock paint model.</p>"},{"location":"providers/painter/#configuration","title":"Configuration","text":"<pre><code>{\n  \"regions\": [\n    \"us-east-1\", \"us-west-2\"\n  ],\n  \"s3Bucket\": \"&lt;your-bucket&gt;\",\n  \"s3Prefix\": \"&lt;your-prefix&gt;\",\n  \"s3Region\": \"us-east-1\",\n  \"sdModelId\": \"stability.stable-diffusion-xl-v1\",\n  \"llmModelId\": \"anthropic.claude-3-sonnet-20240229-v1:0\"\n}\n</code></pre> Key Type Required Default value Description llmModelId string N \u201canthropic.claude-3-sonnet-20240229-v1:0\u201d You should choose a bedrock model for function calling sdModelId string N \u201cstability.stable-diffusion-xl-v1\u201d Bedrock  SDXL model id. This provider is only compatible with sdxl now. s3Bucket string Y S3 is for storing the generated images, please set the IAM permissions to meet access requirements. s3Prefix string N \u201d\u201c The S3 prefix combined with the date will ultimately form the S3 key. s3Region string Y S3 bucket region regions string N [\u201cus-east-1\u201d] If you have applied and specified multiple regions, then a region will be randomly selected for the call. This feature can effectively alleviate performance bottlenecks. <p>Then grant this model to  group or apikey.</p>"},{"location":"providers/painter/#features-and-screenshots-in-brclient","title":"Features and Screenshots in BRClient","text":"<p>Features:</p> <ul> <li>Supports natural language conversation</li> <li>Supports multi-turn conversation to refine prompts</li> <li>Supports multiple languages</li> <li>Supports image size and aspect ratio ratio</li> </ul> <p>Screenshots in BRClient:</p> <p></p> <p></p>"},{"location":"providers/sagemaker-lmi/","title":"sagemaker-lmi","text":"<p>Since Docker image version 0.0.8</p> <p>Connect to Sagemaker LLM modes.</p>"},{"location":"providers/sagemaker-lmi/#configuration","title":"Configuration","text":"<pre><code>{\n  \"regions\": [\n    \"us-east-1\"\n  ],\n  \"endpointName\": \"&lt;your-sagemaker-endpoint&gt;\"\n}\n</code></pre> Key Type Required Default value Description endpointName string Y Sagemaker endpoint name regions string[] or string N [\u201cus-east-1\u201d] If you have applied and specified multiple regions, then a region will be randomly selected for the call. This feature can effectively alleviate performance bottlenecks. <p>Then grant this model to  group or API key.</p>"},{"location":"providers/sagemaker-lmi/#deploy-models-via-sagemaker-lmi","title":"Deploy models via Sagemaker LMI","text":"<p>Sagemaker LMI already supports direct deployment of some popular open-source LLM models, enabling message API-style calls without the need to write custom inference programs.</p> <p>Please refer to this link to view the model deployment:</p> <p>https://github.com/aws-samples/sample-connector-for-bedrock/tree/main/notebook/sagemaker</p>"},{"location":"providers/web-miner/","title":"web-miner","text":"<p>Since Docker image version 0.0.10</p> <p>Seach the internet.</p> <p>This Provider can turn your question into search keywords, obtain results through search engines, and then summarize them into corresponding answers.</p> <p>Tip</p> <p>Do not ask too many rounds of questions, because this Provider will summarize your previous prompts to keywords for searching.</p> <p>In BRClient, too long information is summarized into a single history, losing the earliest user input, which results in the AI answering a far cry from what you want.</p>"},{"location":"providers/web-miner/#model-configuration","title":"Model configuration","text":"<p>The parameter configuration is as follows:</p> <p>Name: some-model</p> <p>Provider: web-miner</p> <p>Configuration:</p> <pre><code>{\n  \"sites\": [\n    \"aws.amazon.com\",\n    \"www.amazonaws.cn\",\n    \"repost.aws\",\n    \"stackoverflow.com\"\n  ],\n  \"localLlmModel\": \"claude-3-sonnet\",\n  \"searxng\": {\n    \"host\": \"http://127.0.0.1:8081/\"\n  },\n  \"serpapi\": {\n    \"apiKey\": \"xxx......\",\n    \"engine\": \"google\"\n  },\n  \"google\": {\n    \"googleAPIKey\": \"AIxxxxxx_xxxxxxxx\",\n    \"googleCSECX\": \"00xxxc000a2xxxxx\"\n  }\n}\n</code></pre> <ul> <li>sites: Limit the search to these websites, you can leave this parameter unspecified.</li> <li>localLlmModel: must be configured as a model that supports function calling and already exists in BRConnector.</li> <li>the search tools below are supported in order:   1. searxng   2. SerpAPI   3. google</li> </ul> <p>Note</p> <p>You need to configure localLlmModel as a claude3+ model provided by the bedrock-converse provider, as other models do not yet have the capability for function calling. The early default claude3 model in the system is not driven by converse. If you use these models, you need to update the original configuration to the bedrock-converse provider. Please note to modify the key \u2018model_id\u2019 to \u2018modelId\u2019.</p>"},{"location":"providers/web-miner/#search-engines","title":"Search engines","text":""},{"location":"providers/web-miner/#searxng","title":"searxng","text":"<p>Since Docker image version 0.0.11</p> <p>Visit https://docs.searxng.org/ for more information.</p> <p>Create a file: <code>settings.yml</code> to support json\u3002</p> <pre><code>use_default_settings: true\nserver:\n    secret_key: \"some-Other-PWD\"   # change this!\n    bind_address: \"0.0.0.0\"\nsearch:\n  formats:\n\n    - html\n    - json\n</code></pre> <p>Start searxng:</p> <pre><code>docker run --rm -d -p 8081:8080 \\\n -e \"BASE_URL=http://localhost:8081/\" \\\n -e \"INSTANCE_NAME=searxng\" searxng/searxng\n</code></pre> <p>Then you will get the searxng endpoint: http://127.0.0.1:8081/, configure it to searxng\u2019s host node.</p>"},{"location":"providers/web-miner/#serpapi","title":"SerpAPI","text":"<p>Since Docker image version 0.0.11</p> <p>For more information, visit https://serpapi.com/.</p> <p>Once you\u2019re logged in, you can see Api key in a prominent place on it.</p> <p>The engine parameter supports the following, and the default is google:</p> <ul> <li>google</li> <li>bing</li> <li>baidu</li> <li>duckduckgo</li> <li>yahoo</li> <li>yandex</li> <li>yelp</li> <li>naver</li> </ul> <p>SerpAPI is not free</p> <p>Exceeding the monthly free limit will be charged.</p>"},{"location":"providers/web-miner/#google","title":"Google","text":"<p>To use the Google Custom Search Engine, you need the following 2 keys, click the link to create them:</p> <ul> <li> <p>Google API Key</p> </li> <li> <p>Google CSECX</p> </li> </ul> <p>Google CSE is not free</p> <p>Exceeding the daily free limit will be charged.</p>"},{"location":"providers/web-miner/#screenshots-in-brclient","title":"Screenshots in BRClient","text":""},{"location":"user-manual/apis/","title":"API Reference","text":""},{"location":"user-manual/apis/#llm-api","title":"LLM API","text":"<p>Completions</p> <pre><code>POST /v1/chat/completions\nContent-Type: application/json\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n{\n  \"model\": \"claude-3-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"ping\"\n    }\n  ],\n  \"stream\": true,\n  \"temperature\": 1,\n  \"max_tokens\": 4096\n}\n</code></pre> <p>List supported models</p> <pre><code>GET /v1/models\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre>"},{"location":"user-manual/apis/#admin-api","title":"Admin API","text":"<p>Create an api key</p> <pre><code>POST /admin/api-key/apply\nContent-Type: application/json\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n{\n  \"name\": \"jack\",\n  \"group_id\": 1,\n  \"role\": \"user\",\n  \"email\": \"\",\n  \"month_quota\": 1.00\n}\n</code></pre> <p>Create an api key with admin role</p> <pre><code>POST /admin/api-key/apply\nContent-Type: application/json\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n{\n  \"name\": \"rob\",\n  \"group_id\": 1,\n  \"role\": \"admin\",\n  \"email\": \"\"\n}\n</code></pre> <p>Update and api key\u2019s info</p> <pre><code>POST /admin/api-key/update\nContent-Type: application/json\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n{\n  \"id\": 2,\n  \"name\": \"jack\",\n  \"month_quota\": 10.00\n}\n</code></pre> <p>Recharge up an API key</p> <pre><code>POST /admin/api-key/recharge\nContent-Type: application/json\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n{\n  \"api_key\": \"br-xxxxxxxxxxxxxxx\",\n  \"balance\": 0.23\n}\n</code></pre> <p>recharge history</p> <pre><code>GET /admin/payment/list?key_id=\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre> <p>List api keys</p> <pre><code>GET /admin/api-key/list?q=&amp;limit=10&amp;offset=\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre> <p>List sessions</p> <pre><code>GET /admin/session/list?q=&amp;limit=10&amp;offset=&amp;key_id=\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre> <p>List threads / histories</p> <pre><code>GET /admin/thread/list?q=&amp;limit=10&amp;offset=&amp;key_id=&amp;session_id=\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre>"},{"location":"user-manual/apis/#user-api","title":"User API","text":"<p>My sessions</p> <pre><code>GET /user/session/list?q=&amp;limit=10&amp;offset=\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre> <p>My session detail</p> <pre><code>GET /user/session/detail/1\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre> <p>My threads / histories</p> <pre><code>GET /user/thread/list?q=&amp;limit=10&amp;offset=&amp;session_id=\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre> <p>My thread detail</p> <pre><code>GET /user/thread/detail/1\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre>"},{"location":"user-manual/development/","title":"Development","text":"<p>This project mainly provides sample code, and it is strongly recommended that you develop it yourself with reference to this project.</p>"},{"location":"user-manual/development/#local-development","title":"Local Development","text":""},{"location":"user-manual/development/#installation","title":"installation","text":"<p>Clone the repository.</p> <p>Install dependencies:</p> <pre><code>npm install\n# or\nyarn\n</code></pre>"},{"location":"user-manual/development/#environment","title":"Environment","text":"<p>the .env file</p> <p>Place it in the root directory of the project.</p> <pre><code>PGSQL_HOST=127.0.0.1\nPGSQL_DATABASE=brconnector_db\nPGSQL_USER=postgres\nPGSQL_PASSWORD=mysecretpassword\nPGSQL_DEBUG_MODE=ok\nADMIN_API_KEY=br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nDEBUG_MODE=true\n</code></pre> <p>The connector supports the following environment variables:</p> Key Required Default value Description ADMIN_API_KEY yes You need to set this value to generate the first API key. PGSQL_HOST no The address of the PostgreSQL. If the database is not configured, then the connector is just a pure proxy. PGSQL_PORT no 5432 The port of the PostgreSQL. PGSQL_DATABASE no The name of the PostgreSQL database. PGSQL_USER no The login user for the PostgreSQL. PGSQL_PASSWORD no The password user for the PostgreSQL. PGSQL_MAX no 80 The maximum connection pool size for PostgreSQL. PGSQL_DEBUG_MODE no false If you set this parameter, it will print out the SQL statements and parameters in the console. AWS_ACCESS_KEY_ID no If your application has been authorized through an IAM policy, you don\u2019t need to set this variable. AWS_SECRET_ACCESS_KEY no If your application has been authorized through an IAM policy, you don\u2019t need to set this variable. AWS_DEFAULT_REGION no \u2018us-east-1\u2019 DEBUG_MODE no false If you set this parameter, it will print out a lot of debugging information in the console. DISABLE_UI no false Setting this value will not publish the front-end UI. SMTP_HOST no SMTP server host address. Setting up an SMTP Server allows you to send your API key directly to the user\u2019s email inbox. SMTP_PORT no 465 SMTP server port number SMTP_USER no SMTP server username SMTP_PASS no SMTP server password SMPT_FROM no SMTP sender email address, your SMTP server maybe verify this"},{"location":"user-manual/development/#run-backend","title":"Run backend","text":"<pre><code>npm run dev\n# or\nyarn dev\n</code></pre> <p>If you have configured postgres, the tables will be created automatically.</p>"},{"location":"user-manual/development/#run-fontend","title":"Run fontend","text":"<pre><code>npm run dev-ui\n# or\nyarn dev-ui\n</code></pre>"},{"location":"user-manual/development/#build","title":"Build","text":""},{"location":"user-manual/development/#build-the-backend-and-frontend-together","title":"Build the backend and frontend together","text":"<pre><code>npm run build\n# or\nyarn build\n</code></pre> <p>The above command will compile the frontend and backend applications into the dist/public and dist/server directories, respectively.</p> <p>After a successful compilation, navigate to the dist directory and execute <code>node server/index.js</code>.</p> <p>If you have not disabled the WebUI, http://localhost:8866/manager will be bound to the WebUI.</p>"},{"location":"user-manual/development/#build-back-end-option","title":"Build back-end (Option)","text":"<pre><code>npm run build-server\n# or\nyarn build-server\n</code></pre>"},{"location":"user-manual/development/#build-front-end-option","title":"Build front-end (Option)","text":"<pre><code>npm run build-ui\n# or\nyarn build-ui\n</code></pre>"},{"location":"user-manual/development/#build-docker-image","title":"Build Docker image","text":"<p>After building, you can use Dockerfile to build Docker image.</p> <p>The content of the Dockerfile:</p> <pre><code>FROM node:20\n\nRUN apt update &amp;&amp; apt install -y awscli\n\nCOPY ./dist /app\nWORKDIR /app\nCOPY ./src/scripts/* ./src/scripts/\nCOPY ./package.json .\n\nRUN npm install --omit=dev\n\nHEALTHCHECK --interval=5s --timeout=3s \\\n  CMD curl -fs http://localhost:8866/ || exit 1\n\nEXPOSE 8866\n\nCMD [\"node\", \"server/index.js\"]\n</code></pre> <p>Note</p> <p>Please note: The above code is not included in this project. Please save the above content in the project\u2019s root directory <code>./Dockerfile</code>.</p> <p>Then execute the following command:</p> <pre><code>docker build -t &lt;registry-repo-tag&gt; .\n</code></pre>"},{"location":"user-manual/introduction/","title":"How to Use","text":"<p>You can access BRConnector using the following methods:</p> <ul> <li>Direct access to the API</li> <li>Using Sample Client for Bedrock(BRClient)</li> <li>Using other clients compatible with OpenAI</li> </ul> <p>Currently, there are many OpenAI clients available on the internet, and some clients can set the Host and API key, so you can directly reuse these clients.</p> <p>For some clients that cannot set the model name, you can work around it in the following way:</p> <p>Suppose a client has the model name fixed as <code>xyzllama3</code>.</p> <p>In the backend of BRConnector, you just need to set the model name as xyzllama3, set the Provider as bedrock-converse, and in the model configuration, set the modelId to any supported model ID.</p>"},{"location":"user-manual/management/","title":"Management","text":""},{"location":"user-manual/management/#login","title":"Login","text":"<p>The management backend path for BRConnector is: http(s)://your-endpoint/manager/.</p> <p>Once you have the BRConnector API Key, you can log into the manager backend.</p> <p>API keys have admin privileges and regular user privileges. Regular users can view their own consumption and chat records.</p> <p>In addition to having the functions of a regular user, the admin role can also manage API keys, models, and groups.</p>"},{"location":"user-manual/management/#api-keys-management","title":"API Keys management","text":""},{"location":"user-manual/management/#main-features","title":"Main features","text":"<p>You can:</p> <ul> <li>Create a user (issue a Key).</li> <li>Import users in bulk.</li> <li>Modify this Key, change the name, monthly consumption limit, etc.</li> <li>Reset the Key.</li> <li>Recharge the Key.</li> </ul>"},{"location":"user-manual/management/#import-users","title":"Import users","text":"<p>You need to prepare a csv file, the column should contain the <code>name</code> and <code>email</code> fields.</p> <p>This project directly supports the import template of cognito. Here\u2019s an Excel example of Cognito, where the user\u2019s name takes precedence over <code>cognito:username</code> and then <code>name</code>.</p> <pre><code>cognito:username,name,given_name,family_name,middle_name,nickname,preferred_username,profile,picture,website,email,email_verified,gender,birthdate,zoneinfo,locale,phone_number,phone_number_verified,address,updated_at,cognito:mfa_enabled\nJohn,,John,Doe,,,,,,,johndoe@example.com,TRUE,,02/01/1985,,,+12345550100,TRUE,123 Any Street,,FALSE\nJane,,Jane,Roe,,,,,,,janeroe@example.com,TRUE,,01/01/1985,,,+12345550199,TRUE,100 Main Street,,FALSE\n</code></pre> <p>Note</p> <p>If you have SMTP configured and include the user\u2019s email in the csv file, the API key will be emailed directly to the user.</p>"},{"location":"user-manual/management/#models","title":"Models","text":"<p>Enter the manager backend, as shown in the image:</p> <p></p> <p>Model form:</p> <p></p> <p>A model consists of the following fields:</p> Key Type Required Default value Description Name string Y The name of the model, which is also the model name in the API call Provider string Y The Provider is provided by BRConnector for selection. Multiple int N 0 Whether the current model supports multi-modal. Prince-In number Y The price of input tokens. You can define this price arbitrarily, mainly to control the model calling of this system. Prince-Out number Y The price of output tokens. Config string(json) N Different configurations will be provided according to different providers. <p>After creating the model, you need to authorize the model to a group or user (API Key).</p>"},{"location":"user-manual/management/#group-management","title":"Group Management","text":"<p>Through groups, you can conveniently grant authorization to models.</p> <p>At the same time, API Keys can also belong to a group.</p>"},{"location":"user-manual/management/#models-authorization","title":"Models Authorization","text":"<p>After creating a model, you need to grant authorization for the model to a group or user (API Key).</p> <p>On the API Keys list page, click the Models button.</p> <p>On the Groups list page, there is also a Models button.</p> <p>The models authorized to API Keys and groups have an \u201cAND\u201d relationship.</p>"},{"location":"user-manual/sample-client-for-bedrock/","title":"Sample client for Bedrock","text":""},{"location":"user-manual/sample-client-for-bedrock/#introduction","title":"Introduction","text":"<p>The Sample Client for Bedrock (BRClient) is a sample project that demonstrates how to build a client that connects to the Bedrock large language model.</p> <p>In addition to being able to directly invoke Bedrock from the client, it can also set up this project (BRConnector) as its API backend.</p> <p>Project URL: aws-samples/sample-client-for-amazon-bedrock</p>"},{"location":"user-manual/sample-client-for-bedrock/#quick-start","title":"Quick Start","text":"<p>You can start BRClient directly from the source code or download the installer for various platforms.</p> <p>If you have deployed the BRConnector project, you can start it directly through this URL: http(s)://your-endpoint/brclient/.</p>"},{"location":"user-manual/sample-client-for-bedrock/#settings","title":"Settings","text":"<p>After entering the web interface, you need to enable BRConnector in the settings.</p> <p></p> <p>For the BRConnector Endpoint, simply fill in the root path of your BRConnector.</p> <p>Fill in the API Key issued by BRConnector.</p> <p>After setting it up, you can refresh the page to get the model list from BRConnector. Whenever you set up a new model, you can refresh the page to get the list of new models.</p>"},{"location":"zh/","title":"Sample Connector for Bedrock","text":"<p>\u96c6\u6210 AWS \u751f\u6210\u5f0f AI\uff0c\u73b0\u5728\u975e\u5e38\u7b80\u5355\uff01</p> <p>\u4ece\u4e0b\u9762\u7684\u94fe\u63a5\u5f00\u59cb\uff1a</p> <ul> <li> <p>\u5feb\u901f\u542f\u52a8</p> </li> <li> <p>\u4f7f\u7528 Cloudformation \u5feb\u901f\u90e8\u7f72</p> </li> <li> <p>\u5f00\u53d1\u6a21\u5f0f</p> </li> </ul>"},{"location":"zh/home/","title":"\u4ecb\u7ecd","text":"<p>\u672c\u9879\u76ee\u662f\u4e00\u4e2a Amazon Bedrock \u4ee5\u53ca\u5176\u4ed6\u5927\u8bed\u8a00\u6a21\u578b\u6216\u5e94\u7528\u7684\u8f6c\u53d1\u5de5\u5177\uff0c\u4ed6\u53ef\u4ee5\u7ba1\u7406\u865a\u62df API Key\uff0c\u8bb0\u5f55\u804a\u5929\u8bb0\u5f55\uff0c\u5e76\u7ba1\u7406\u6210\u672c\u3002</p> <p>\u5b83\u4e0e\u4efb\u4f55\u53ef\u4ee5\u5b9a\u4e49 Host \u548c API \u5bc6\u94a5\u7684 OpenAI \u5ba2\u6237\u7aef\u517c\u5bb9\u3002</p>"},{"location":"zh/home/#_2","title":"\u4e3b\u8981\u7279\u6027","text":""},{"location":"zh/home/#_3","title":"\u652f\u6301\u7684\u6a21\u578b\u548c\u5e73\u53f0","text":"<ul> <li> <p>\u652f\u6301 Bedrock \u73b0\u5728\u4ee5\u53ca\u672a\u6765\u7684\u6240\u6709\u5927\u8bed\u8a00\u6a21\u578b\uff08\u901a\u8fc7 bedrock-converse \u652f\u6301\uff09\u3002</p> </li> <li> <p>\u652f\u6301\u901a\u8fc7 Sagemaker LMI \u90e8\u7f72\u7684\u6a21\u578b\uff08\u90e8\u5206\u6a21\u578b\uff09\u3002</p> </li> <li> <p>\u652f\u6301\u5176\u4ed6\u5f62\u5f0f\u7684\u81ea\u5b9a\u4e49\u6a21\u578b\uff0c\u5305\u62ec\uff1aOllama \u7b49\u3002</p> </li> <li> <p>\u66f4\u591a\u7684 AI \u6d41\u7a0b\u5316\u7684\u5e94\u7528\uff0c\u5982 \u4e92\u8054\u7f51\u641c\u7d22\uff0cAWS \u547d\u4ee4\u6267\u884c\u5668\u7b49\u3002</p> </li> </ul>"},{"location":"zh/home/#api-key","title":"API Key \u548c \u8d39\u7528\u7ba1\u7406","text":"<ul> <li>\u521b\u5efa API \u5bc6\u94a5\u3002\u53ef\u4ee5\u4e3a\u666e\u901a\u7528\u6237\u548c\u7ba1\u7406\u5458\u521b\u5efa\u3002\u666e\u901a\u7528\u6237\u53ef\u4ee5\u804a\u5929\uff0c\u800c\u7ba1\u7406\u5458\u53ef\u4ee5\u7ba1\u7406API\u5bc6\u94a5\u548c\u6210\u672c\u3002</li> <li>\u8bb0\u5f55\u6bcf\u6b21\u8c03\u7528\u7684\u6210\u672c\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u6210\u672c\u63a7\u5236\u7684\u4f9d\u636e\u3002</li> <li>\u6210\u672c\u63a7\u5236\u3002\u60a8\u53ef\u4ee5\u4e3a\u6bcf\u4e2aAPI\u5bc6\u94a5\u8bbe\u7f6e\u6bcf\u6708\u914d\u989d\u548c\u8d26\u6237\u4f59\u989d\u3002\u5f53\u6bcf\u6708\u914d\u989d\u6216\u8d26\u6237\u4f59\u989d\u4e0d\u8db3\u65f6,\u5c06\u65e0\u6cd5\u4f7f\u7528\u3002</li> <li>\u8ba1\u7b97\u603b\u4f53\u6210\u672c\u3002</li> </ul> <p>\u60a8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6a21\u578b\u4ef7\u683c. Bedrock \u6a21\u578b\u7684\u57fa\u51c6\u4ef7\u683c\u53ef\u4ee5\u53c2\u8003\u5b98\u7f51.</p> <p>Warning</p> <p>\u8fd9\u4e2a\u9879\u76ee\u7684\u6210\u672c\u8ba1\u7b97\u4e0d\u80fd\u4f5c\u4e3a AWS \u7684\u8ba1\u8d39\u4f9d\u636e\u3002\u5b9e\u9645\u652f\u51fa\u8bf7\u53c2\u8003 AWS \u8d26\u5355\u3002</p> <p></p>"},{"location":"zh/home/#_4","title":"\u6a21\u578b\u7ba1\u7406","text":"<p>\u6a21\u578b\u53ca\u5176\u53c2\u6570\u53ef\u4ee5\u4ece\u540e\u7aef\u5b9a\u4e49\u3002\u53c2\u89c1\u521b\u5efa\u6a21\u578b\u3002</p> <p>\u5b9a\u4e49\u5b8c\u6210\u4e4b\u540e\uff0c\u6a21\u578b\u53ef\u4ee5\u7ed1\u5b9a\u5230\u7ec4\u6216\u8005 API Key\u3002</p> <p></p>"},{"location":"zh/home/changelogs/","title":"\u66f4\u65b0\u65e5\u5fd7","text":""},{"location":"zh/home/deployment/","title":"\u5feb\u901f\u90e8\u7f72","text":"<p>\u4f7f\u7528 Cloudformation \u5feb\u901f\u90e8\u7f72\u3002</p>"},{"location":"zh/home/deployment/#_2","title":"\u652f\u6301\u7684\u533a\u57df","text":"<p>Cloudformation \u6a21\u677f\u5df2\u5728\u4ee5\u4e0b\u533a\u57df\u9a8c\u8bc1\uff1a</p> <ul> <li>us-east-1</li> <li>us-west-2</li> </ul>"},{"location":"zh/home/deployment/#_3","title":"\u5148\u51b3\u6761\u4ef6","text":"<p>\u5728\u60a8\u7684\u533a\u57df\u542f\u7528 Claude 3 Sonnet \u6216 Haiku - \u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u4f7f\u7528 Anthropic \u6a21\u578b\uff0c\u8bf7\u8f6c\u5230\u00a0Amazon Bedrock \u63a7\u5236\u53f0\u00a0\u5e76\u5728\u5de6\u4e0b\u89d2\u7a97\u683c\u4e2d\u9009\u62e9\u00a0\u6a21\u578b\u8bbf\u95ee\u3002\u5355\u72ec\u8bf7\u6c42 Claude 3 Sonnet \u6216 Haiku \u7684\u8bbf\u95ee\u6743\u9650\u3002</p>"},{"location":"zh/home/deployment/#_4","title":"\u7ec4\u4ef6","text":"<p>\u6b64 Cloudformation \u6a21\u677f\u5c06\u5305\u542b\u4ee5\u4e0b\u5173\u952e\u7ec4\u4ef6\uff1a</p> <ul> <li>Cloudfront</li> <li>Lambda \u6216 EC2 \u4e0a\u7684 BRConnector</li> <li>EC2 \u4e0a\u7684 RDS PostgreSQL \u6216 PostgreSQL \u5bb9\u5668</li> <li>\u542f\u7528\u4e86\u62c9\u53d6\u7f13\u5b58\u7684 ECR</li> </ul>"},{"location":"zh/home/deployment/#_5","title":"\u90e8\u7f72\u6307\u5357","text":"<ul> <li>\u4e0b\u8f7d quick-build-brconnector.yaml \u5e76\u4e0a\u4f20\u5230 Cloudformation \u63a7\u5236\u53f0\u6216\u5355\u51fb\u6b64\u6309\u94ae\u76f4\u63a5\u542f\u52a8\u3002</li> </ul> <ul> <li>VPC \u53c2\u6570</li> <li>\u9009\u62e9\u521b\u5efa\u65b0 VPC \u6216\u73b0\u6709 VPC</li> <li>\u4e3a EC2 \u9009\u62e9\u4e00\u4e2a\u516c\u5171\u5b50\u7f51\uff0c\u4e3a Lambda \u548c RDS \u9009\u62e9\u4e00\u4e2a\u79c1\u6709\u5b50\u7f51\uff08 RDS \u5b50\u7f51\u7ec4\u81f3\u5c11\u9700\u8981 2 \u4e2a\u53ef\u7528\u533a\uff09</li> </ul> <ul> <li>\u8ba1\u7b97\u53c2\u6570</li> <li>\u9009\u62e9 BRConnector\u3001Lambda \u6216 EC2 \u7684\u8ba1\u7b97\u7c7b\u578b</li> <li>\u5bf9\u4e8eEC2 \u8bbe\u7f6e<ul> <li>\u73b0\u5728\u4ec5\u652f\u6301 Amazon Linux 2023</li> <li>\u60a8\u53ef\u4ee5\u9009\u62e9\u5728\u540c\u4e00 EC2 \u4e2d\u521b\u5efa PostgreSQL \u4f5c\u4e3a\u5bb9\u5668\uff08<code>StandaloneDB</code> \u4e3a false\uff09\uff0c\u6216\u521b\u5efa\u72ec\u7acb\u7684 RDS PostgreSQL \u4f5c\u4e3a\u540e\u7aef\uff08<code>StandaloneDB</code> \u4e3a true\uff09</li> </ul> </li> <li>\u5bf9\u4e8e Lambda \u8bbe\u7f6e<ul> <li>\u5c06\u4f7f\u7528 PUBLIC \u51fd\u6570 URL\u3002\u8bf7\u786e\u4fdd\u6b64\u5b89\u5168\u8bbe\u7f6e\u662f\u53ef\u63a5\u53d7\u7684</li> <li>\u5b9a\u4e49\u60a8\u7684\u79c1\u6709\u5b58\u50a8\u5e93\u540d\u79f0\u524d\u7f00\u5b57\u7b26\u4e32</li> <li>\u59cb\u7ec8\u521b\u5efa RDS PostgreSQL\uff08<code>StandaloneDB</code> \u4e3a true\uff09</li> </ul> </li> </ul> <ul> <li>PostgreSQL \u53c2\u6570</li> <li>\u9ed8\u8ba4 PostgreSQL \u5bc6\u7801\u4e3a <code>mysecretpassword</code></li> <li>\u5982\u679c\u60a8\u9009\u62e9 <code>StandaloneDB</code> \u4e3a false\uff0cPostgreSQL \u5c06\u4f5c\u4e3a\u5bb9\u5668\u5728 EC2 \u4e0a\u8fd0\u884c\u3002\u5982\u679c\u6b64\u9009\u9879\u4e3a true\uff0c\u5c06\u521b\u5efa RDS PostgreSQL\u3002</li> <li>\u5176\u4ed6\u4fdd\u6301\u9ed8\u8ba4</li> </ul> <ul> <li>\u8c03\u8bd5\u53c2\u6570</li> <li>\u5982\u679c\u9009\u62e9 Lambda \u4f5c\u4e3a ComputeType\uff0c\u5219\u53ef\u4ee5\u9009\u62e9\u5728\u6240\u6709\u8d44\u6e90\u90e8\u7f72\u6210\u529f\u540e\u5220\u9664 EC2\u3002\u6b64 EC2 \u6682\u65f6\u7528\u4e8e\u7f16\u8bd1\u548c\u6784\u5efa BRConnector \u5bb9\u5668\u3002</li> <li>\u5982\u679c\u9009\u62e9 EC2 \u4f5c\u4e3a ComputeType\uff0c\u8bf7\u4e0d\u8981\u5220\u9664 EC2</li> <li>\u5982\u679c\u5c06 AutoUpdateBRConnector \u8bbe\u7f6e\u4e3a <code>true</code>\uff0c\u5219\u4f1a\u5c06\u4e00\u4e2a\u811a\u672c\u6dfb\u52a0\u5230 codebuild \u4e2d</li> </ul> <ul> <li>\u76f4\u5230\u90e8\u7f72\u6210\u529f\uff0c\u8f6c\u5230\u8f93\u51fa\u9875\u9762\u5e76\u5c06 Cloudfront URL \u548c First User Key \u590d\u5236\u5230\u60a8\u7684 Bedrock \u5ba2\u6237\u7aef\u8bbe\u7f6e\u9875\u9762\u3002</li> </ul> <ul> <li>\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 SSM \u4f1a\u8bdd\u7ba1\u7406\u5668\u8fde\u63a5\u5230 <code>BRConnector</code> EC2 \u5b9e\u4f8b (docs)</li> </ul>"},{"location":"zh/home/deployment/#brconnector","title":"\u66f4\u65b0 BRConnector","text":""},{"location":"zh/home/deployment/#autoupdate-true","title":"AutoUpdate \u4e3a true","text":"<ul> <li>\u68c0\u67e5\u60a8\u7684 ECR \u8bbe\u7f6e\uff0c\u5982\u679c\u5728\u62c9\u53d6\u7f13\u5b58\u9875\u9762\u4e2d\u6709\u89c4\u5219\uff0c\u5219\u60a8\u5df2\u542f\u7528\u6b64\u529f\u80fd\u4ee5\u4f7f\u7528\u4e0a\u6e38\u5b58\u50a8\u5e93\u81ea\u52a8\u66f4\u65b0 ECR \u6620\u50cf\u3002</li> <li>\u8f6c\u5230 codebuild \u9875\u9762\uff0c\u5c06\u89e6\u53d1\u4e00\u4e2a\u9879\u76ee\u5b9a\u671f\u6784\u5efa\u4ee5\u81ea\u52a8\u66f4\u65b0\u60a8\u7684 lambda \u6620\u50cf</li> <li>EC2 \u4e2d\u7684\u6620\u50cf\u5c06\u4f7f\u7528 SSM \u4e2d\u7684\u72b6\u6001\u7ba1\u7406\u5668\u81ea\u52a8\u66f4\u65b0\u3002</li> </ul>"},{"location":"zh/home/deployment/#autoupdate-false","title":"AutoUpdate \u4e3a false","text":"<ul> <li>\u68c0\u67e5\u60a8\u7684 ECR \u8bbe\u7f6e\uff0c\u5982\u679c\u5728\u62c9\u53d6\u7f13\u5b58\u9875\u9762\u4e2d\u6709\u89c4\u5219\uff0c\u5219\u60a8\u5df2\u542f\u7528\u6b64\u529f\u80fd\u4ee5\u4f7f\u7528\u4e0a\u6e38\u5b58\u50a8\u5e93\u81ea\u52a8\u66f4\u65b0 ECR \u6620\u50cf\u3002</li> <li>\u8f6c\u5230 codebuild \u9875\u9762\uff0c\u53ef\u4ee5\u89e6\u53d1\u4e00\u4e2a\u9879\u76ee\u6765\u624b\u52a8\u66f4\u65b0\u60a8\u7684 lambda \u6620\u50cf\u3002\u5355\u51fb\u201c\u5f00\u59cb\u6784\u5efa\u201d\u4ee5\u66f4\u65b0 lambda \u6620\u50cf\u3002</li> <li>\u7531\u4e8e\u672a\u521b\u5efa\u5173\u8054\uff0cEC2 \u4e2d\u7684\u6620\u50cf\u5c06\u4e0d\u4f1a\u4f7f\u7528 SSM \u4e2d\u7684\u72b6\u6001\u7ba1\u7406\u5668\u81ea\u52a8\u66f4\u65b0\u3002\u53c2\u8003 SSM \u4e2d\u7684\u6587\u6863\u4ee5\u624b\u52a8\u5728 EC2 \u4e2d\u6267\u884c\u547d\u4ee4\u3002</li> </ul>"},{"location":"zh/home/deployment/#ecr-cfn","title":"\u672a\u542f\u7528\u62c9\u53d6\u7f13\u5b58\u7684 ECR\uff08\u4ec5\u9002\u7528\u4e8e\u4ee5\u524d\u7684 cfn \u7248\u672c\uff09","text":"<ul> <li>\u5982\u679c\u60a8\u672a\u542f\u7528 ECR \u62c9\u53d6\u7f13\u5b58\uff0c\u8bf7\u6309\u7167\u6b64\u811a\u672c\u624b\u52a8\u66f4\u65b0\u6620\u50cf</li> </ul> <pre><code>export AWS_DEFAULT_REGION=us-west-2\nexport ACCOUNT_ID=00000000000000\nexport PrivateECRRepository=your_private_repo_name\n\naws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com\n\n# pull/tag/push arm64 image for lambda\ndocker pull --platform=linux/arm64 public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock-lambda\ndocker tag public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock-lambda ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:arm64\ndocker push ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:arm64\n\n# pull/tag/push amd64 image for lambda\ndocker pull --platform=linux/amd64 public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock-lambda\ndocker tag public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock-lambda ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:amd64\ndocker push ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:amd64\n\n# create/push manifest file\ndocker manifest create ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:latest --amend ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:arm64 --amend ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:amd64\ndocker manifest annotate ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:latest ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:arm64 --os linux --arch arm64\ndocker manifest annotate ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:latest ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:amd64 --os linux --arch amd64\ndocker manifest push ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:latest\n</code></pre> <ul> <li>\u4f7f\u7528\u6b63\u786e\u7684\u67b6\u6784\u66f4\u65b0 lambda \u6620\u50cf</li> </ul>"},{"location":"zh/home/deployment/#ec2-brconnector","title":"\u8fd0\u884c\u5728 EC2 \u4e0a\u7684 BRConnector","text":"<ul> <li>\u767b\u5f55\u5230 ec2 \u4ee5\u66f4\u65b0\u672c\u5730\u6620\u50cf\u5e76\u91cd\u65b0\u542f\u52a8 brconnector \u5bb9\u5668</li> </ul> <pre><code>aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws\ndocker pull public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock\ndocker restart brconnector\n</code></pre>"},{"location":"zh/home/deployment/#postgresql","title":"\u8fc1\u79fb\u5230\u65b0\u7684 PostgreSQL \u6570\u636e\u5e93","text":"<p>\u60a8\u53ef\u4ee5\u9009\u62e9\u5728 ECR \u6216 RDS \u4e0a\u7684\u5bb9\u5668\u4e2d\u76f4\u63a5\u90e8\u7f72 PostgreSQL\uff0c\u8fd9\u91cc\u5217\u51fa\u4e86\u4e00\u4e9b\u547d\u4ee4\u4f9b\u60a8\u5728 PG \u4e2d\u8fc1\u79fb\u6570\u636e\u7684\u53c2\u8003\u3002</p>"},{"location":"zh/home/deployment/#brconnector-ec2-pg-rds","title":"\u5c06 BRConnector \u6570\u636e\u4ece EC2 \u4e0a\u7684 PG \u5bb9\u5668\u8fc1\u79fb\u5230 RDS","text":"<ul> <li> <p>\u5217\u51fa\u60a8\u7684\u6570\u636e\u5e93\u540d\u79f0 <pre><code>docker exec -it postgres psql -U postgres\npostgres=&gt; \\l # \u5217\u51fa\u6570\u636e\u5e93\n</code></pre></p> </li> <li> <p>dump db <pre><code>docker exec -i postgres pg_dump -U postgres -d brproxy_dbname -a &gt; db.sql\n</code></pre></p> </li> <li> <p>\u5728 RDS \u4e2d\u627e\u5230\u60a8\u7684 PG \u7aef\u70b9 (Endpoint)</p> </li> <li> <p>\u6211\u4eec\u5c06\u5728\u60a8\u7684\u672c\u5730\u4e34\u65f6\u8fd0\u884c\u4e00\u4e2a docker \u4f5c\u4e3a postgres \u5ba2\u6237\u7aef\uff0c\u800c\u4e0d\u662f\u5b89\u88c5 postgresql <pre><code>POSTGRES_VERSION=16\ndocker run --name postgres-client \\\n-e POSTGRES_PASSWORD=postgres-client-tmp-password \\\n-d postgres:${POSTGRES_VERSION}\n</code></pre></p> </li> <li> <p>\u5bfc\u5165\u5230 brconnector_db <pre><code>docker exec -i postgres-client \\\npsql -U postgres -h pg-endpoint.xxx.us-west-2.rds.amazonaws.com \\\n-d brconnector_db &lt; db.sql\n</code></pre></p> </li> <li> <p>clean temporary docker on local <pre><code>docker rm -f postgres-client\n</code></pre></p> </li> </ul>"},{"location":"zh/home/deployment/#brconnector-ec2-pg-ec2","title":"\u5c06 BRConnector \u6570\u636e\u4ece EC2 \u4e0a\u7684 PG \u5bb9\u5668\u8fc1\u79fb\u5230\u65b0\u7684 EC2","text":"<ul> <li> <p>\u5217\u51fa\u6570\u636e\u5e93\u540d\u79f0 <pre><code>docker exec -it postgres psql -U postgres\npostgres=&gt; \\l # \u5217\u51fa\u6570\u636e\u5e93\n</code></pre></p> </li> <li> <p>dump db <pre><code>docker exec -i postgres pg_dump -U postgres -d brproxy_dbname -a &gt; db.sql\n</code></pre></p> </li> <li> <p>\u5bfc\u5165\u5230 brconnector_db <pre><code>docker exec -i postgres psql -U postgres -d brconnector_db &lt; db.sql\n</code></pre></p> </li> </ul>"},{"location":"zh/home/quick-start/","title":"\u5feb\u901f\u542f\u52a8","text":""},{"location":"zh/home/quick-start/#1","title":"1. \u51c6\u5907\u670d\u52a1\u5668","text":"<p>\u5728 AWS \u4e0a\u542f\u52a8\u4e00\u4e2a EC2 \u5b9e\u4f8b\u6216\u4efb\u4f55\u5176\u4ed6\u652f\u6301 Docker \u7684\u670d\u52a1\u5668\u3002</p>"},{"location":"zh/home/quick-start/#2-docker-postgres","title":"2. \u4f7f\u7528 Docker \u8fd0\u884c Postgres","text":"<p>\u4f7f\u7528\u4ee5\u4e0bshell\u547d\u4ee4\u542f\u52a8\u4e00\u4e2aDocker\u5bb9\u5668\u6765\u6258\u7ba1Postgres:</p> <pre><code>docker run --name postgres \\\n  -e POSTGRES_PASSWORD=mysecretpassword \\\n  -p 5432:5432 \\\n  -d postgres\n</code></pre> <p>\u7136\u540e\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a <code>brconnector_db</code> \u7684\u6570\u636e\u5e93\u3002</p> <p>\u9996\u5148\uff0c\u8fde\u63a5\u5230 prostgress \u5bb9\u5668:</p> <pre><code>docker exec -it postgres psql -U postgres\n</code></pre> <p>\u7136\u540e\uff0c\u5728 postgres \u7684 SQL \u547d\u4ee4\u884c\u4e2d\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u521b\u5efa\u6570\u636e\u5e93:</p> <pre><code>CREATE DATABASE brconnector_db;\n</code></pre> <p>\u6570\u636e\u5e93\u540d\u79f0\u4e0d\u4e00\u5b9a\u8981\u662f <code>brconnector_db</code>\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6709\u6548\u7684\u6570\u636e\u5e93\u540d\u79f0\u3002</p> <p>\u5982\u679c\u4f60\u4f7f\u7528\u81ea\u5df1\u7684\u6570\u636e\u5e93\u540d\u79f0,\u8bf7\u786e\u4fdd\u8bb0\u4f4f\u6570\u636e\u5e93\u540d\u79f0,\u5e76\u5c06 <code>brconnector_db</code> \u66ff\u6362\u4e3a\u4f60\u7684\u6570\u636e\u5e93\u540d\u79f0\u3002</p>"},{"location":"zh/home/quick-start/#3-docker","title":"3. \u4f7f\u7528 Docker \u542f\u52a8","text":"<p>\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b docker \u547d\u4ee4\u6765\u542f\u52a8\u8fde\u63a5\u5668\u5bb9\u5668\u3002</p> <p>\u786e\u4fdd\u5c06\u8bbf\u95ee\u5bc6\u94a5\u3001\u79d8\u5bc6\u5bc6\u94a5\u3001\u533a\u57df\u7684\u503c\u66ff\u6362\u4e3a\u6b63\u786e\u7684\u503c\u3002</p> <p>\u800c\u4e14,\u91cd\u8981\u7684\u662f!\u5c06 ADMIN_API_KEY \u7684\u503c\u66ff\u6362\u4e3a\u4e00\u4e2a\u590d\u6742\u7684\u5bc6\u94a5,\u800c\u4e0d\u662f\u4f7f\u7528\u793a\u4f8b\u4e2d\u7684\u7b80\u5355\u5bc6\u94a5\u3002</p> <pre><code>docker run --name brconnector \\\n --restart always --pull always \\\n -p 8866:8866 \\\n -e AWS_ACCESS_KEY_ID=xxxx \\\n -e AWS_SECRET_ACCESS_KEY=xxxxx \\\n -e AWS_DEFAULT_REGION=us-east-1 \\\n -e PGSQL_HOST=172.17.0.1 \\\n -e PGSQL_DATABASE=brconnector_db \\\n -e PGSQL_USER=postgres \\\n -e PGSQL_PASSWORD=mysecretpassword \\\n -e ADMIN_API_KEY=br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \\\n -d cloudbeer/sample-connector-for-bedrock\n</code></pre>"},{"location":"zh/home/quick-start/#4","title":"4. \u6d4b\u8bd5","text":"<p>\u73b0\u5728,\u60a8\u6709\u4e86\u7b2c\u4e00\u4e2a\u7ba1\u7406\u5458\u7528\u6237,\u5176API\u5bc6\u94a5\u4e3a\u201dbr_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u201d\u3002</p> <p>\u4f7f\u7528<code>curl</code>\u547d\u4ee4\u5e76\u5e26\u4e0aAPI\u5bc6\u94a5\u6765\u6d4b\u8bd5\u670d\u52a1\u5668:</p> <pre><code>curl \"http://localhost:8866/admin/api-key/list\" \\\n  -H \"Authorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" \n</code></pre> <p>\u60a8\u4f1a\u5f97\u5230\u5982\u4e0b\u7684\u8f93\u51fa:</p> <pre><code>{\"success\":true,\"data\":{\"items\":[],\"total\":\"0\",\"limit\":20,\"offset\":0}}\n</code></pre>"},{"location":"zh/home/quick-start/#5","title":"5. \u521b\u5efa\u7b2c\u4e00\u4e2a\u7ba1\u7406\u5458\u7528\u6237","text":"<p>\u4e0a\u9762\u914d\u7f6e\u7684 API_KEY \u4ec5\u7528\u4e8e\u542f\u52a8\u670d\u52a1\u5668\u548c\u521b\u5efa\u7b2c\u4e00\u4e2a\u7ba1\u7406\u5458\u7528\u6237\u3002</p> <p>\u8be5 API_KEY \u5e76\u975e\u8bbe\u8ba1\u7528\u4e8e\u4f5c\u4e3a\u7ba1\u7406\u5458\u7528\u6237\u6216\u666e\u901a\u7528\u6237\u4f7f\u7528\u3002</p> <p>\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u521b\u5efa\u7b2c\u4e00\u4e2a\u7ba1\u7406\u5458\u7528\u6237:</p> <pre><code>curl -X POST \"http://localhost:8866/admin/api-key/apply\" \\\n     -H \"Content-Type: application/json\" \\\n     -H \"Authorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" \\\n     -d '{\"name\": \"adminuser\",\"group_id\": 1,\"role\": \"admin\",\"email\": \"\", \"month_quota\":\"20\"}'\n</code></pre> <p>\u8f93\u51fa\u5927\u6982\u5982\u4e0b:</p> <pre><code>{\"success\":true,\"data\":{\"id\":1,\"name\":\"adminuser\",\"email\":\"\",\"api_key\":\"br-someotherkeyvaluexxxxx\",\"role\":\"admin\",\"month_quota\":\"20.0000000000\",\"balance\":\"0.0000000000\"}}\n</code></pre> <p>\u8bb0\u5f55\u65b0\u7528\u6237\u7684\u65b0 api_key, \u6b64 api_key \u53ef\u7528\u4e8e\u914d\u7f6e\u60a8\u7684\u5ba2\u6237\u7aef\u8fdb\u884c\u804a\u5929\u3002 \u6b64 api_key \u4e5f\u53ef\u7528\u4e8e\u767b\u5f55 BRConnector\u7684\u7ba1\u7406 WebUI \u6765\u7ba1\u7406\u5176\u4ed6 api_key\u3002</p>"},{"location":"zh/home/quick-start/#6","title":"6. \u914d\u7f6e\u5ba2\u6237\u7aef","text":"<p>\u60a8\u5e94\u8be5\u4f7f\u7528 HTTPS \u66b4\u9732\u8fde\u63a5\u5668\u670d\u52a1\u5668\u3002</p> <p>\u5728 AWS \u4e0a\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u521b\u5efa CloudFront CDN \u6765\u63d0\u4f9b SSL \u652f\u6301\u3002</p> <p>\u6709\u5173\u5728 AWS \u4e0a\u8bbe\u7f6e CloudFront \u7684\u66f4\u591a\u4fe1\u606f,\u8bf7\u53c2\u9605 AWS \u7684\u5b98\u65b9\u6587\u6863\u3002</p> <p>\u6253\u5f00\u4e00\u4e2a\u53ef\u4ee5\u4e3a OpenAI \u5b9a\u4e49 Host \u548c API \u5bc6\u94a5\u7684\u5ba2\u6237\u7aef\u3002</p> <p>\u5728 \u201cHost\u201d \u5b57\u6bb5\u4e2d\u8f93\u5165 CloudFront \u7f51\u5740\u3002</p> <p>\u5728\u201dAPK Key\u201d\u5b57\u6bb5\u4e2d, \u8f93\u5165\u6b65\u9aa4 5 \u4e2d\u521b\u5efa\u7684\u7b2c\u4e00\u4e2a\u7ba1\u7406\u5458\u7528\u6237\u7684 API Key\u3002</p> <p>\u7136\u540e,\u6253\u5f00\u4e00\u4e2a\u65b0\u7684\u804a\u5929\u7a97\u53e3\u8fdb\u884c\u6d4b\u8bd5\u3002</p> <p>\u5982\u679c\u4e00\u5207\u987a\u5229,\u60a8\u5c31\u53ef\u4ee5\u5f00\u59cb\u804a\u5929\u4e86\u3002</p> <p>Note</p> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a https://github.com/aws-samples/sample-client-for-amazon-bedrock \u5ba2\u6237\u7aef\u6765\u6d4b\u8bd5\uff0c\u8bf7\u67e5\u770b\u5982\u4f55\u914d\u7f6e\u3002</p> <p>Since 0.0.8, this client has been built into the docker image. The access address is: <code>http(s)://your-endpoint/brclient/</code></p>"},{"location":"zh/home/quick-start/#7","title":"7. \u540e\u53f0\u7ba1\u7406\u754c\u9762","text":"<p>\u5982\u679c\u60a8\u6ca1\u6709\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf DISABLE_UI,\u60a8\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7 <code>http(s)://your-endpoint/manager/</code> \u8bbf\u95ee BRConnector Web \u7ba1\u7406\u754c\u9762\u3002</p> <p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u521a\u521a\u751f\u6210\u7684API\u5bc6\u94a5\u767b\u5f55\u5e76\u7ba1\u7406\u5b83\u3002\u8bf7\u5c06 <code>http(s)://your-endpoint</code> \u4f5c\u4e3a\u4e3b\u673a\u5730\u5740\u8f93\u5165\u3002</p>"},{"location":"zh/providers/aws-executor/","title":"aws-executor","text":"<p>Since Docker image version 0.0.10</p> <p>AWS \u547d\u4ee4\u884c\u6267\u884c\u5668\u3002</p> <p>\u901a\u8fc7\u6b64 Provider\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u81ea\u7136\u8bed\u8a00\u6267\u884c AWS \u547d\u4ee4\u200b\u200b\u5e76\u83b7\u53d6\u6267\u884c\u7ed3\u679c\u3002</p> <p>\u6267\u884c AWS \u547d\u4ee4\u200b\u200b\u7684\u89d2\u8272\u548c\u8fd0\u884c BRConnector \u7684\u89d2\u8272\u5f53\u524d\u662f\u76f8\u540c\u7684\uff0c\u56e0\u6b64\u60a8\u9700\u8981\u4e3a\u5f53\u524d\u89d2\u8272\u6388\u4e88\u9002\u5f53\u7684\u6743\u9650\u3002</p> <p>Warning</p> <p>\u4e0d\u8981\u4e3a\u5173\u952e\u8d44\u6e90\u6388\u4e88\u5199\u6743\u9650\uff0c\u56e0\u4e3a\u5f53\u524d AI \u89e3\u6790\u7684\u547d\u4ee4\u884c\u5e76\u4e0d\u7a33\u5b9a\u3002\u4f46\u662f\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u53c2\u8003 AI \u5efa\u8bae\u7684\u547d\u4ee4\u884c\u3002</p>"},{"location":"zh/providers/aws-executor/#_1","title":"\u6a21\u578b\u914d\u7f6e","text":"<p>\u53c2\u6570\u914d\u7f6e\u5982\u4e0b\uff1a</p> <p>\u540d\u79f0\uff1asome-model</p> <p>Provider\uff1aaws-executor</p> <p>\u914d\u7f6e\uff1a</p> <pre><code>{\n  \"localLlmModel\": \"claude-3-sonnet\"\n}\n</code></pre> <p>localLlmModel \u5fc5\u987b\u914d\u7f6e\u4e3a\u652f\u6301\u51fd\u6570\u8c03\u7528\u4e14\u5df2\u5b58\u5728\u4e8e BRConnector \u4e2d\u7684\u6a21\u578b\u3002</p> <p>Note</p> <p>\u60a8\u9700\u8981\u914d\u7f6e bedrock-converse \u63d0\u4f9b\u7a0b\u5e8f\u63d0\u4f9b\u7684 claude3+ \u6a21\u578b\uff0c\u5176\u4ed6\u6a21\u578b\u5c1a\u4e0d\u5177\u5907\u51fd\u6570\u8c03\u7528\u529f\u80fd\u3002\u65e9\u671f\u7cfb\u7edf\u4e2d\u9ed8\u8ba4\u7684 claude3 \u6a21\u578b\u4e0d\u662f\u7531 converse \u9a71\u52a8\u7684\u3002\u5982\u679c\u60a8\u4f7f\u7528\u8fd9\u4e9b\u6a21\u578b\uff0c\u5219\u9700\u8981\u5c06\u539f\u59cb\u914d\u7f6e\u7684 Provider \u66f4\u65b0\u4e3a bedrock-converse\u3002\u8bf7\u6ce8\u610f\u5c06\u952e \u2018model_id\u2019 \u4fee\u6539\u4e3a \u2018modelId\u2019\u3002</p> <p>\u5e76\u4e14\u60a8\u5fc5\u987b\u5728 BRConnector \u5bbf\u4e3b\u8fd0\u884c\u73af\u5883\u4e2d\u5b89\u88c5 aws cli v2\u3002</p>"},{"location":"zh/providers/aws-executor/#brclient","title":"BRClient \u4e2d\u7684\u5c4f\u5e55\u622a\u56fe","text":""},{"location":"zh/providers/bedrock-converse/","title":"bedrock-converse","text":"<p>Since Docker image version 0.0.6</p> <p>Amazon Bedrock LLM \u7edf\u4e00\u8c03\u7528\u3002</p> <p>\u5c06\u6d88\u606f\u53d1\u9001\u5230\u6307\u5b9a\u7684 Amazon Bedrock \u6a21\u578b\u3002Converse\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0e\u652f\u6301\u6d88\u606f\u7684\u6240\u6709\u6a21\u578b\u517c\u5bb9\u7684\u7edf\u4e00\u63a5\u53e3\u3002\u8fd9\u5141\u8bb8\u60a8\u53ea\u7f16\u5199\u4e00\u6b21\u4ee3\u7801,\u5e76\u5c06\u5176\u7528\u4e8e\u4e0d\u540c\u7684\u6a21\u578b\u3002\u5982\u679c\u67d0\u4e2a\u6a21\u578b\u5177\u6709\u72ec\u7279\u7684\u63a8\u7406\u53c2\u6570,\u60a8\u4e5f\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u72ec\u7279\u7684\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u6a21\u578b\u3002</p>"},{"location":"zh/providers/bedrock-converse/#_1","title":"\u53c2\u6570\u914d\u7f6e","text":"<p>\u901a\u8fc7\u4e9a\u9a6c\u900aBedrock Converse API\u8c03\u7528\u6a21\u578b\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u6b64\u63d0\u4f9b\u7a0b\u5e8f\u914d\u7f6e\u6240\u6709\u652f\u6301\u7684\u6a21\u578b\u3002</p> <p>\u8fd9\u4e2a\u7f51\u5740 \u89e3\u91ca\u4e86\u5982\u4f55\u4f7f\u7528 Bedrock Converse API \u4ee5\u53ca\u4ed6\u652f\u6301\u7684\u7279\u6027\u3002</p> <p>\u5efa\u8bae\u4f7f\u7528\u8fd9\u4e2a Provider \u6765\u652f\u6301 Bedrock \u7684\u5927\u8bed\u8a00\u6a21\u578b\u3002</p> Key Type Required Default value Description modelId string Y Model id, \u70b9\u8fd9\u91cc\u67e5\u770b\u5217\u8868 regions string[] or string N [\u201cus-east-1\u201d] \u5982\u679c\u60a8\u5df2\u7ecf\u7533\u8bf7\u5e76\u6307\u5b9a\u4e86\u591a\u4e2a\u5730\u533a,\u90a3\u4e48\u5c06\u4f1a\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5730\u533a\u8fdb\u884c\u8c03\u7528\u3002\u8fd9\u4e2a\u529f\u80fd\u53ef\u4ee5\u6709\u6548\u7f13\u89e3\u6027\u80fd\u74f6\u9888\u3002 <p>bedrock-converse \u7684\u914d\u7f6e\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>{\n  \"modelId\": \"anthropic.claude-3-sonnet-20240229-v1:0\",\n  \"regions\": [\n    \"us-east-1\",\n    \"us-west-2\"\n  ]\n}\n</code></pre>"},{"location":"zh/providers/bedrock-knowledge-base/","title":"bedrock-knowledge-base","text":"<p>Bedrock \u77e5\u8bc6\u5e93\u3002</p>"},{"location":"zh/providers/bedrock-knowledge-base/#_1","title":"\u521b\u5efa\u77e5\u8bc6\u5e93\u5b9e\u4f8b","text":"<p>\u53c2\u8003\u6b64\u6587\u6863\uff1a\u521b\u5efa\u77e5\u8bc6\u5e93</p>"},{"location":"zh/providers/bedrock-knowledge-base/#_2","title":"\u6a21\u578b\u5b9a\u4e49","text":"<p>\u914d\u7f6e\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>{\n  \"region\": \"&lt;your-region&gt;\",\n  \"summaryModel\": \"claude-3-sonnet\",\n  \"knowledgeBaseId\": \"&lt;your-kb-id&gt;\"\n}\n</code></pre> <ul> <li>knowledgeBaseId\uff1a\u77e5\u8bc6\u5e93 ID\u3002</li> <li>summaryModel\uff1a\u652f\u6301 claude-3-sonnet\u3001claude-3-haiku \u6216 claude-3-opus</li> </ul>"},{"location":"zh/providers/bedrock-knowledge-base/#api","title":"API \u8c03\u7528","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4 api \u8c03\u7528\uff0cBedrock \u8fde\u63a5\u5668\u5c06\u5f39\u51fa\u6700\u540e\u4e00\u6761\u6d88\u606f\u4ee5\u4e0e\u77e5\u8bc6\u5e93\u804a\u5929\u3002</p> <pre><code>POST /v1/chat/completions\nContent-Type: application/json\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n{\n  \"model\": \"your-custom-model-name\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"how to protect s3 data?\"\n    }\n  ]\n}\n</code></pre>"},{"location":"zh/providers/bedrock-knowledge-base/#brclient","title":"\u4f7f\u7528 BRClient","text":""},{"location":"zh/providers/introduction/","title":"\u4f7f\u7528 Provider","text":"<p>Provider \u662f\u901a\u8fc7 Model \u5411\u5916\u63d0\u4f9b\u670d\u52a1\u7684\u3002</p> <p>\u9996\u5148\u60a8\u9700\u8981 \u65b0\u5efa\u4e00\u4e2a\u6a21\u578b\u3002</p> <p>\u4ece Provider \u7684\u4e0b\u62c9\u5217\u8868\u91cc\u9009\u62e9\u76f8\u5e94\u7684 Provider\u3002</p> <p>\u4e0d\u540c\u7684 Provider \u5c06\u4f1a\u5bf9\u5e94\u4e0d\u7528\u7684\u914d\u7f6e\u3002</p> <p>\u6b64\u7ae0\u8282\u5c06\u4f1a\u5177\u4f53\u63cf\u8ff0\u6bcf\u4e2a\u6a21\u578b\u7684\u914d\u7f6e\u3002</p>"},{"location":"zh/providers/ollama/","title":"ollama","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528 Ollama \u90e8\u7f72\u539f\u751f\u6a21\u578b\u3002\u8be5\u63d0\u4f9b\u5546\u53ef\u4ee5\u9002\u5e94 Ollama \u7684 API\u3002</p> <p>\u66f4\u591a\u4fe1\u606f,\u8bf7\u8bbf\u95ee https://github.com/ollama/ollama/\u3002</p>"},{"location":"zh/providers/ollama/#_1","title":"\u914d\u7f6e","text":"<pre><code>{\n  \"host\": \"http://localhost:11434\",\n  \"model\": \"phi3\"\n}\n</code></pre> Key Type Required Default value Description host string Y ollama \u90e8\u7f72\u5730\u5740 model string Y Model id. \u67e5\u770b Ollama \u6587\u6863"},{"location":"zh/providers/painter/","title":"painter","text":"<p>Since Docker image version 0.0.9</p> <p>\u4f7f\u7528 Bedrock \u753b\u56fe\u6a21\u578b</p>"},{"location":"zh/providers/painter/#_1","title":"\u914d\u7f6e","text":"<pre><code>{\n  \"regions\": [\n    \"us-east-1\", \"us-west-2\"\n  ],\n  \"s3Bucket\": \"&lt;your-bucket&gt;\",\n  \"s3Prefix\": \"&lt;your-prefix&gt;\",\n  \"s3Region\": \"us-east-1\",\n  \"sdModelId\": \"stability.stable-diffusion-xl-v1\",\n  \"llmModelId\": \"anthropic.claude-3-sonnet-20240229-v1:0\"\n}\n</code></pre> Key Type Required Default value Description llmModelId string N \u201canthropic.claude-3-sonnet-20240229-v1:0\u201d You should choose a bedrock model for function calling sdModelId string N \u201cstability.stable-diffusion-xl-v1\u201d Bedrock  SDXL model id. This provider is only compatible with sdxl now. s3Bucket string Y S3 is for storing the generated images, please set the IAM permissions to meet access requirements. s3Prefix string N \u201d\u201c The S3 prefix combined with the date will ultimately form the S3 key. s3Region string Y S3 bucket region regions string N [\u201cus-east-1\u201d] If you have applied and specified multiple regions, then a region will be randomly selected for the call. This feature can effectively alleviate performance bottlenecks. <p>\u7136\u540e\u5c06\u6b64\u6a21\u578b\u6388\u4e88\u7ec4\u6216 apikey\u3002</p>"},{"location":"zh/providers/painter/#brclient","title":"BRClient \u4e2d\u7684\u529f\u80fd\u548c\u622a\u56fe","text":"<p>\u60a8\u53ef\u4ee5\u5728\u5bf9\u8bdd\u4e2d\u5305\u542b\u5982\u4e0b\u4fe1\u606f\uff1a</p> <ul> <li>\u652f\u6301\u81ea\u7136\u8bed\u8a00\u5bf9\u8bdd</li> <li>\u652f\u6301\u591a\u8f6e\u5bf9\u8bdd\u4ee5\u7ec6\u5316\u63d0\u793a</li> <li>\u652f\u6301\u591a\u79cd\u8bed\u8a00</li> <li>\u652f\u6301\u56fe\u50cf\u5927\u5c0f\u548c\u5bbd\u9ad8\u6bd4</li> </ul> <p>BRClient \u4e2d\u7684\u622a\u56fe\uff1a</p> <p></p> <p></p>"},{"location":"zh/providers/sagemaker-lmi/","title":"sagemaker-lmi","text":"<p>Since Docker image version 0.0.8</p> <p>\u4f7f\u7528 Sagemaker \u90e8\u7f72\u81ea\u5b9a\u4e49\u6a21\u578b\u3002</p>"},{"location":"zh/providers/sagemaker-lmi/#_1","title":"\u914d\u7f6e","text":"<pre><code>{\n  \"regions\": [\n    \"us-east-1\"\n  ],\n  \"endpointName\": \"&lt;your-sagemaker-endpoint&gt;\"\n}\n</code></pre> Key Type Required Default value Description endpointName string Y Sagemaker endpoint \u540d\u79f0 regions string[] or string N [\u201cus-east-1\u201d] \u60a8\u53ef\u4ee5\u628a\u6a21\u578b\u90e8\u7f72\u5728\u591a\u53ef\u7528\u533a\uff0c\u53ef\u589e\u52a0\u6a21\u578b\u7684\u53ef\u7528\u6027\u3002 <p>\u7136\u540e\u5c06\u6b64\u6a21\u578b\u6388\u4e88\u7ec4\u6216 API key\u3002</p>"},{"location":"zh/providers/sagemaker-lmi/#_2","title":"\u90e8\u7f72\u6a21\u578b","text":"<p>Sagemaker LMI \u5df2\u7ecf\u652f\u6301\u4e86\u90e8\u5206\u6d41\u884c\u7684\u5f00\u6e90 LLM \u6a21\u578b\u7684\u76f4\u63a5\u90e8\u7f72\uff0c\u65e0\u9700\u7f16\u5199\u81ea\u5b9a\u4e49\u7684\u63a8\u7406\u7a0b\u5e8f\u5373\u53ef\u652f\u6301 message API \u98ce\u683c\u7684\u8c03\u7528\u3002</p> <p>\u8bf7\u53c2\u8003\u8fd9\u4e2a\u94fe\u63a5\u67e5\u770b\u6a21\u578b\u90e8\u7f72\uff1a</p> <p>https://github.com/aws-samples/sample-connector-for-bedrock/tree/main/notebook/sagemaker</p>"},{"location":"zh/providers/web-miner/","title":"web-miner","text":"<p>Since Docker image version 0.0.10</p> <p>\u641c\u7d22\u4e92\u8054\u7f51\u3002</p> <p>\u672c Provider \u53ef\u4ee5\u5c06\u60a8\u7684\u95ee\u9898\u8f6c\u5316\u4e3a\u641c\u7d22\u5173\u952e\u8bcd\uff0c\u901a\u8fc7\u641c\u7d22\u5f15\u64ce\u83b7\u53d6\u7ed3\u679c\uff0c\u7136\u540e\u5c06\u5176\u603b\u7ed3\u6210\u76f8\u5e94\u7684\u7b54\u6848\u3002\u652f\u6301\u591a\u8f6e\u5bf9\u8bdd\u3002</p> <p>Tip</p> <p>\u4e0d\u8981\u95ee\u592a\u591a\u8f6e\u6b21\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u8fd9\u4e2a Provider \u4f1a\u628a\u4f60\u4e4b\u524d\u7684\u63d0\u793a\u603b\u7ed3\u6210\u4e3a\u5173\u952e\u8bcd\u5e76\u8fdb\u884c\u641c\u7d22\u3002</p> <p>\u5728 BRClient \u4e2d\uff0c\u592a\u957f\u4fe1\u606f\u4f1a\u88ab\u603b\u7ed3\u6210\u5355\u4e00\u5386\u53f2\u8bb0\u5f55\uff0c\u4ece\u800c\u4e22\u5931\u6700\u65e9\u7684\u7528\u6237\u8f93\u5165\uff0c\u8fd9\u4f1a\u5bfc\u81f4 AI \u56de\u7b54\u7684\u7ed3\u679c\u548c\u60a8\u60f3\u8981\u7684\u76f8\u53bb\u751a\u8fdc\u3002</p>"},{"location":"zh/providers/web-miner/#_1","title":"\u6a21\u578b\u914d\u7f6e","text":"<p>\u53c2\u6570\u914d\u7f6e\u5982\u4e0b:</p> <p>Name: some-model</p> <p>Provider: web-miner</p> <p>Configuration:</p> <pre><code>{\n  \"sites\": [\n    \"aws.amazon.com\",\n    \"www.amazonaws.cn\",\n    \"repost.aws\",\n    \"stackoverflow.com\"\n  ],\n  \"localLlmModel\": \"claude-3-sonnet\",\n  \"searxng\": {\n    \"host\": \"http://127.0.0.1:8081/\"\n  },\n  \"serpapi\": {\n    \"apiKey\": \"xxx......\",\n    \"engine\": \"google\"\n  },\n  \"google\": {\n    \"googleAPIKey\": \"AIxxxxxx_xxxxxxxx\",\n    \"googleCSECX\": \"00xxxc000a2xxxxx\"\n  }\n}\n</code></pre> <ul> <li>sites: \u53ea\u4ece\u8fd9\u4e9b\u7f51\u7ad9\u91cc\u8fdb\u884c\u641c\u7d22\uff0c\u53ef\u4ee5\u4e0d\u6307\u5b9a\u6b64\u53c2\u6570\u3002</li> <li>localLlmModel: \u5fc5\u987b\u914d\u7f6e\u4e3a\u652f\u6301\u51fd\u6570\u8c03\u7528\u7684\u6a21\u578b\uff0c\u5e76\u4e14\u5df2\u5b58\u5728\u4e8e BRConnector \u4e2d\u3002</li> <li>\u652f\u6301\u4e0b\u9762\u7684\u8fd9\u4e9b\u641c\u7d22\u5f15\u64ce\u6216\u96c6\u5408\u5de5\u5177\u4e2d\u7684\u4e00\u4e2a\uff0c\u4f18\u5148\u7ea7\u5982\u4e0b:   1. searxng   2. SerpAPI   3. google</li> </ul> <p>Note</p> <p>\u60a8\u9700\u8981\u5c06 localLlmModel \u7684\u6a21\u578b\u914d\u7f6e\u6210 bedrock-converse \u63d0\u4f9b\u7a0b\u5e8f\u63d0\u4f9b\u7684 claude3+ \u6a21\u578b\uff0c\u5176\u4ed6\u6a21\u578b\u5c1a\u4e0d\u5177\u5907\u51fd\u6570\u8c03\u7528\u529f\u80fd\u3002\u65e9\u671f\u7cfb\u7edf\u4e2d\u9ed8\u8ba4\u7684 claude3 \u6a21\u578b\u4e0d\u662f\u7531 converse \u9a71\u52a8\u7684\u3002\u5982\u679c\u60a8\u4f7f\u7528\u8fd9\u4e9b\u6a21\u578b\uff0c\u5219\u9700\u8981\u5c06\u539f\u59cb\u914d\u7f6e\u7684 Provider \u66f4\u65b0\u4e3a bedrock-converse\u3002\u8bf7\u6ce8\u610f\u5c06\u952e \u2018model_id\u2019 \u4fee\u6539\u4e3a \u2018modelId\u2019\u3002</p>"},{"location":"zh/providers/web-miner/#_2","title":"\u641c\u7d22\u914d\u7f6e","text":""},{"location":"zh/providers/web-miner/#searxng","title":"searxng","text":"<p>Since Docker image version 0.0.11</p> <p>\u8be6\u60c5\u8bf7\u8bbf\u95ee https://docs.searxng.org/\u3002</p> <p>\u521b\u5efa\u4e00\u4e2a settings.yml \u6587\u4ef6\uff0c\u589e\u52a0 json \u8f93\u51fa\u683c\u5f0f\u3002</p> <pre><code>use_default_settings: true\nserver:\n    secret_key: \"some-Other-PWD\"   # change this!\n    bind_address: \"0.0.0.0\"\nsearch:\n  formats:\n\n    - html\n    - json\n</code></pre> <p>\u542f\u52a8 searxng:</p> <pre><code>docker run --rm -d -p 8081:8080 \\\n  -v ./settings.yml:/etc/searxng/settings.yml \\\n  -e \"INSTANCE_NAME=searxng\" searxng/searxng\n</code></pre> <p>\u8fd9\u6837\u90e8\u7f72\u51fa\u6765\u7684 searxng \u4e3b\u673a\u5730\u5740\u662f: http://127.0.0.1:8081/\uff0c\u8bf7\u5c06\u5176\u914d\u7f6e\u5230 searxng \u7684 host \u8282\u70b9\u4e2d\u3002</p>"},{"location":"zh/providers/web-miner/#serpapi","title":"SerpAPI","text":"<p>Since Docker image version 0.0.11</p> <p>\u8be6\u60c5\u8bf7\u8bbf\u95ee https://serpapi.com/\u3002</p> <p>\u767b\u5f55\u540e\uff0c\u60a8\u53ef\u4ee5\u5728\u5176\u663e\u773c\u4f4d\u7f6e\u770b\u5230 API Key\u3002</p> <p>engine \u53c2\u6570\u652f\u6301\u5982\u4e0b\u8fd9\u4e9b\uff0c\u9ed8\u8ba4\u662f google\uff1a</p> <ul> <li>google</li> <li>bing</li> <li>baidu</li> <li>duckduckgo</li> <li>yahoo</li> <li>yandex</li> <li>yelp</li> <li>naver</li> </ul> <p>SerpAPI \u4e0d\u514d\u8d39</p> <p>\u8bf7\u6ce8\u610f\uff1a\u8d85\u8fc7\u6bcf\u6708\u7684\u9650\u989d\u4f1a\u88ab\u6536\u8d39\u3002</p>"},{"location":"zh/providers/web-miner/#google","title":"Google","text":"<p>\u4f7f\u7528 Google \u81ea\u5b9a\u4e49\u641c\u7d22\u5f15\u64ce\uff0c\u9700\u8981\u5982\u4e0b 2 \u4e2a Key\uff0c\u8bf7\u70b9\u51fb\u76f8\u5e94\u94fe\u63a5\u521b\u5efa\uff1a</p> <ul> <li> <p>\u7533\u8bf7 googleAPIKey</p> </li> <li> <p>\u7533\u8bf7 googleCSECX</p> </li> </ul> <p>Google CSE \u4e0d\u514d\u8d39</p> <p>\u8bf7\u6ce8\u610f\uff1a\u8d85\u8fc7\u6bcf\u65e5\u7684\u9650\u989d\u4f1a\u88ab\u6536\u8d39\u3002</p>"},{"location":"zh/providers/web-miner/#brclient","title":"\u5728 BRClient \u4e2d\u7684\u622a\u56fe","text":""},{"location":"zh/user-manual/development/","title":"\u5f00\u53d1\u6307\u5357","text":"<p>\u672c\u9879\u76ee\u662f\u793a\u4f8b\u4ee3\u7801\uff0c\u5f3a\u70c8\u5efa\u8bae\u60a8\u53c2\u8003\u672c\u9879\u76ee\u81ea\u884c\u5f00\u53d1\u3002</p>"},{"location":"zh/user-manual/development/#_2","title":"\u672c\u5730\u5f00\u53d1\u6a21\u5f0f","text":"<p>Clone \u672c\u9879\u76ee\u3002</p> <p>\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>npm install\n# or\nyarn\n</code></pre>"},{"location":"zh/user-manual/development/#_3","title":"\u73af\u5883\u53d8\u91cf\u914d\u7f6e","text":"<p>.env \u6587\u4ef6</p> <p>\u8fd9\u4e2a\u6587\u4ef6\u653e\u5728\u9879\u76ee\u6839\u76ee\u5f55.</p> <pre><code>PGSQL_HOST=127.0.0.1\nPGSQL_DATABASE=brconnector_db\nPGSQL_USER=postgres\nPGSQL_PASSWORD=mysecretpassword\nPGSQL_DEBUG_MODE=ok\nADMIN_API_KEY=br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nDEBUG_MODE=true\n</code></pre> <p>\u652f\u6301\u5982\u4e0b\u73af\u5883\u53d8\u91cf\uff1a</p> Key Required Default value Description ADMIN_API_KEY yes You need to set this value to generate the first API key. PGSQL_HOST no The address of the PostgreSQL. If the database is not configured, then the connector is just a pure proxy. PGSQL_PORT no 5432 The port of the PostgreSQL. PGSQL_DATABASE no The name of the PostgreSQL database. PGSQL_USER no The login user for the PostgreSQL. PGSQL_PASSWORD no The password user for the PostgreSQL. PGSQL_MAX no 80 The maximum connection pool size for PostgreSQL. PGSQL_DEBUG_MODE no false If you set this parameter, it will print out the SQL statements and parameters in the console. AWS_ACCESS_KEY_ID no If your application has been authorized through an IAM policy, you don\u2019t need to set this variable. AWS_SECRET_ACCESS_KEY no If your application has been authorized through an IAM policy, you don\u2019t need to set this variable. AWS_DEFAULT_REGION no \u2018us-east-1\u2019 DEBUG_MODE no false If you set this parameter, it will print out a lot of debugging information in the console. DISABLE_UI no false Setting this value will not publish the front-end UI. SMTP_HOST no SMTP server host address. Setting up an SMTP Server allows you to send your API key directly to the user\u2019s email inbox. SMTP_PORT no 465 SMTP server port number SMTP_USER no SMTP server username SMTP_PASS no SMTP server password SMPT_FROM no SMTP sender email address, your SMTP server maybe verify this"},{"location":"zh/user-manual/development/#_4","title":"\u542f\u52a8\u540e\u53f0","text":"<pre><code>npm run dev\n# or\nyarn dev\n</code></pre> <p>If you have configured postgres, the tables will be created automatically.</p>"},{"location":"zh/user-manual/development/#_5","title":"\u542f\u52a8\u7ba1\u7406\u754c\u9762","text":"<pre><code>npm run dev-ui\n# or\nyarn dev-ui\n</code></pre>"},{"location":"zh/user-manual/development/#_6","title":"\u6784\u5efa","text":""},{"location":"zh/user-manual/development/#_7","title":"\u4e00\u8d77\u6784\u5efa","text":"<pre><code>npm run build\n# or\nyarn build\n</code></pre> <p>The above command will compile the frontend and backend applications into the dist/public and dist/server directories, respectively.</p> <p>After a successful compilation, navigate to the dist directory and execute <code>node server/index.js</code>.</p> <p>If you have not disabled the WebUI, http://localhost:8866/manager will be bound to the WebUI.</p>"},{"location":"zh/user-manual/development/#_8","title":"\u6784\u5efa\u540e\u7aef (\u53ef\u9009)","text":"<pre><code>npm run build-server\n# or\nyarn build-server\n</code></pre>"},{"location":"zh/user-manual/development/#_9","title":"\u6784\u5efa\u524d\u7aef (\u53ef\u9009)","text":"<pre><code>npm run build-ui\n# or\nyarn build-ui\n</code></pre>"},{"location":"zh/user-manual/development/#docker","title":"Docker \u955c\u50cf","text":"<p>\u7f16\u8bd1\u5b8c\u6210\u4e4b\u540e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528  Dockerfile \u6765\u6784\u5efa\u4f60\u7684\u955c\u50cf\u3002</p> <p>The content of the Dockerfile:</p> <pre><code>FROM node:20\n\nRUN apt update &amp;&amp; apt install -y awscli\n\nCOPY ./dist /app\nWORKDIR /app\nCOPY ./src/scripts/* ./src/scripts/\nCOPY ./package.json .\n\nRUN npm install --omit=dev\n\nHEALTHCHECK --interval=5s --timeout=3s \\\n  CMD curl -fs http://localhost:8866/ || exit 1\n\nEXPOSE 8866\n\nCMD [\"node\", \"server/index.js\"]\n</code></pre> <p>Note</p> <p>\u4e0a\u9762\u7684 Dockefile \u6ca1\u6709\u5305\u542b\u5728\u9879\u76ee\u4e2d\u3002</p> <p>\u7136\u540e\u6267\u884c\u6253\u5305\u547d\u4ee4\uff1a</p> <pre><code>docker build -t &lt;registry-repo-tag&gt; .\n</code></pre>"},{"location":"zh/user-manual/introduction/","title":"\u5982\u4f55\u4f7f\u7528","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u65b9\u6cd5\u6765\u8bbf\u95ee BRConnector\u3002</p> <ul> <li>\u76f4\u63a5\u8bbf\u95ee API</li> <li>\u4f7f\u7528 Sample Client for Bedrock(BRClient)</li> <li>\u4f7f\u7528\u5176\u4ed6\u4e0e OpenAI \u517c\u5bb9\u7684\u5ba2\u6237\u7aef</li> </ul> <p>\u73b0\u5728\u5e02\u9762\u4e0a\u5df2\u7ecf\u6709\u5f88\u591a OpenAI \u7684\u5ba2\u6237\u7aef\uff0c\u6709\u4e9b\u5ba2\u6237\u7aef\u53ef\u4ee5\u8bbe\u7f6e Host \u548c API key\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u590d\u7528\u8fd9\u4e9b\u5ba2\u6237\u7aef\u3002</p> <p>\u6709\u90e8\u5206\u5ba2\u6237\u7aef\u7aef\u65e0\u6cd5\u8bbe\u7f6e\u6a21\u578b\u7684\u540d\u79f0\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u65b9\u5f0f\u7ed5\u5f00\uff1a</p> <p>\u5047\u8bbe\u67d0\u4e2a\u5ba2\u6237\u7aef\u5c06\u6a21\u578b\u540d\u5b57\u56fa\u5b9a\u4e3a <code>xyzllama3</code>\u3002</p> <p>\u5728 BRConnector \u7684\u540e\u7aef\uff0c\u60a8\u53ea\u9700\u8981\u5c06\u6a21\u578b\u540d\u79f0\u8bbe\u7f6e\u4e3a xyzllama3\uff0c\u628a Provider \u8bbe\u7f6e\u4e3a bedrock-converse\uff0c\u5728\u6a21\u578b\u914d\u7f6e\u91cc\uff0c\u5c06 modelId \u8bbe\u7f6e\u4e3a\u4efb\u610f\u652f\u6301\u7684\u6a21\u578b ID \u5373\u53ef\u3002</p>"},{"location":"zh/user-manual/management/","title":"\u540e\u53f0\u7ba1\u7406","text":""},{"location":"zh/user-manual/management/#_2","title":"\u767b\u5f55","text":"<p>BRConnector \u7684\u7ba1\u7406\u540e\u53f0\u8def\u5f84\u4e3a\uff1ahttp(s)://your-endpoint/manager/</p> <p>\u4e00\u65e6\u60a8\u6709\u4e86 BRConnector \u7684 API Key\uff0c\u5c31\u53ef\u4ee5\u767b\u5f55 manager \u7ba1\u7406\u540e\u53f0\u4e86\u3002</p> <p>API key \u5206\u7ba1\u7406\u5458\u6743\u9650\u548c\u666e\u901a\u7528\u6237\u6743\u9650\u3002\u666e\u901a\u7528\u6237\u53ef\u4ee5\u770b\u5230\u81ea\u5df1\u7684\u6d88\u8d39\u548c\u804a\u5929\u8bb0\u5f55\u3002</p> <p>\u7ba1\u7406\u5458\u89d2\u8272\u9664\u4e86\u62e5\u6709\u666e\u901a\u7528\u6237\u7684\u529f\u80fd\uff0c\u8fd8\u53ef\u4ee5\u7ba1\u7406 API key\uff0c\u6a21\u578b \u548c \u7ec4\u3002</p>"},{"location":"zh/user-manual/management/#api-keys","title":"API Keys \u7ba1\u7406","text":""},{"location":"zh/user-manual/management/#_3","title":"\u4e3b\u8981\u529f\u80fd","text":"<ul> <li>\u521b\u5efa\u4e00\u4e2a\u7528\u6237\uff08\u9881\u53d1\u4e00\u4e2a Key\uff09\u3002</li> <li>\u6279\u91cf\u5bfc\u5165\u7528\u6237\u3002</li> <li>\u4fee\u6539\u8fd9\u4e2a Key\uff0c\u4fee\u6539\u540d\u5b57\uff0c\u6708\u6d88\u8d39\u989d\u7b49\u3002</li> <li>\u91cd\u7f6e Key\u3002</li> <li>\u7ed9 Key \u5145\u503c\u3002</li> </ul>"},{"location":"zh/user-manual/management/#_4","title":"\u6279\u91cf\u5bfc\u5165\u7528\u6237","text":"<p>\u9700\u8981\u51c6\u5907\u4e00\u4e2a csv \u6587\u4ef6\uff0c\u5217\u5e94\u8be5\u5305\u542b <code>name</code> \u548c <code>email</code> \u4e24\u4e2a\u5b57\u6bb5\u3002</p> <p>\u672c\u9879\u76ee\u76f4\u63a5\u652f\u6301\u4e86 cognito \u7684\u5bfc\u5165\u6a21\u7248\uff0c\u8fd9\u91cc\u662f\u4e00\u4e2a cognito \u7684 excel \u793a\u4f8b\uff0c\u7528\u6237\u7684\u540d\u5b57\u4f1a\u4f18\u5148\u91c7\u7eb3 <code>cognito:username</code>\uff0c\u7136\u540e <code>name</code>\u3002</p> <pre><code>cognito:username,name,given_name,family_name,middle_name,nickname,preferred_username,profile,picture,website,email,email_verified,gender,birthdate,zoneinfo,locale,phone_number,phone_number_verified,address,updated_at,cognito:mfa_enabled\nJohn,,John,Doe,,,,,,,johndoe@example.com,TRUE,,02/01/1985,,,+12345550100,TRUE,123 Any Street,,FALSE\nJane,,Jane,Roe,,,,,,,janeroe@example.com,TRUE,,01/01/1985,,,+12345550199,TRUE,100 Main Street,,FALSE\n</code></pre> <p>Note</p> <p>\u5982\u679c\u60a8\u914d\u7f6e\u4e86 SMTP\uff0c\u5e76\u4e14\u5728 csv \u6587\u4ef6\u91cc\u91cc\u5305\u542b\u4e86\u7528\u6237 email\uff0c\u90a3\u4e48 API key \u4f1a\u76f4\u63a5\u901a\u8fc7\u90ae\u4ef6\u53d1\u9001\u7ed9\u7528\u6237\u3002</p>"},{"location":"zh/user-manual/management/#_5","title":"\u6a21\u578b\u7ba1\u7406","text":"<p>\u5305\u542b\u5982\u4e0b\u529f\u80fd\uff1a</p> <ul> <li>\u521b\u5efa\u6a21\u578b</li> <li>\u4fee\u6539\u6a21\u578b</li> </ul> <p>\u60a8\u7b2c\u4e00\u6b21\u90e8\u7f72 BRConnector \u7684\u65f6\u5019\uff0c\u4f1a\u53d1\u73b0\u7cfb\u7edf\u4ec5\u5185\u7f6e\u4e86 bedrock-converse  \u652f\u6301\u7684\u90e8\u5206\u6a21\u578b\u3002</p> <p>\u4e3a\u4e86\u4f7f\u7528\u65b0\u7684 Provider\uff0c\u60a8\u9700\u8981\u5728\u540e\u53f0\u521b\u5efa\u4e00\u4e2a\u6a21\u578b\u3002</p> <p>\u521b\u5efa\u6a21\u578b\uff0c\u8fdb\u5165 manager \u540e\u53f0\uff0c\u5982\u56fe\uff1a </p> <p>\u6a21\u578b\u8868\u5355\uff1a</p> <p></p> <p>\u6a21\u578b\u7531\u4ee5\u4e0b\u51e0\u4e2a\u5b57\u6bb5\u7ec4\u6210\uff1a</p> Key Type Required Default value Description Name string Y \u6a21\u578b\u7684\u540d\u5b57\uff0c\u8fd9\u4e2a\u540d\u5b57\u4e5f\u662f API \u8c03\u7528\u4e2d\u7684\u6a21\u578b\u540d\u5b57 Provider string Y Privder \u8fd9\u4e2a\u7531 BRConnector \u63d0\u4f9b\u9009\u62e9\u3002 Multiple int N 0 \u5f53\u524d\u6a21\u578b\u662f\u5426\u652f\u6301\u591a\u6a21\u6001\u3002 Prince-In number Y \u8f93\u5165 token \u7684\u4ef7\u683c\u3002\u8fd9\u4e2a\u4ef7\u683c\u60a8\u53ef\u4ee5\u968f\u610f\u5b9a\u4e49\uff0c\u4e3b\u8981\u7528\u4e8e\u63a7\u5236\u672c\u7cfb\u7edf\u7684\u6a21\u578b\u8c03\u7528 Prince-Out number Y \u8f93\u51fa token \u7684\u4ef7\u683c\u3002 Config string(json) N \u6839\u636e\u4e0d\u540c\u7684\u63d0\u4f9b\u5668\u4f1a\u63d0\u4f9b\u4e0d\u540c\u7684\u914d\u7f6e\u3002"},{"location":"zh/user-manual/management/#_6","title":"\u7ec4\u7ba1\u7406","text":"<p>\u901a\u8fc7\u7ec4\uff0c\u60a8\u53ef\u4ee5\u65b9\u4fbf\u5730\u7ed9\u6a21\u578b\u6388\u6743\u3002</p> <p>\u540c\u65f6 API Keys \u4e5f\u53ef\u4ee5\u5c5e\u4e8e\u67d0\u4e00\u4e2a\u7ec4\u3002</p>"},{"location":"zh/user-manual/management/#_7","title":"\u6a21\u578b\u6388\u6743","text":"<p>\u521b\u5efa\u5b8c\u6a21\u578b\uff0c\u60a8\u9700\u8981\u5c06\u8be5\u6a21\u578b\u6388\u6743\u7ed9\u7ec4\u6216\u8005\u7528\u6237\uff08API Key\uff09\u3002</p> <p>\u5728 API Keys \u7684\u5217\u8868\u9875\u9762\uff0c\u70b9\u51fb Models \u6309\u94ae\u3002</p> <p>\u5728 Groups \u7684\u5217\u8868\u9875\u9762\uff0c\u540c\u6837\u4e5f\u6709 Models \u6309\u94ae\u3002</p> <p>API Keys \u4e0e \u7ec4\u6388\u6743\u7684\u6a21\u578b\u662f \u201c\u5e76\u201d \u7684\u5173\u7cfb\u3002</p>"},{"location":"zh/user-manual/sample-client-for-bedrock/#_1","title":"\u7b80\u4ecb","text":"<p>Sample client for Bedrock (BRClient) \u662f\u4e00\u4e2a\u6837\u4f8b\u9879\u76ee\uff0c\u7528\u4e8e\u5c55\u793a\u5982\u4f55\u6784\u5efa\u4e00\u4e2a\u8fde\u63a5 Bedrock \u5927\u8bed\u8a00\u6a21\u578b\u7684\u5ba2\u6237\u7aef\u3002</p> <p>\u4ed6\u9664\u4e86\u53ef\u4ee5\u5728\u5ba2\u6237\u7aef\u76f4\u63a5\u53d1\u8d77\u5bf9 Bedrock \u7684\u8c03\u7528\uff0c\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u672c\u9879\u76ee(BRConnector)\u6210\u4e3a\u4ed6\u7684 API \u540e\u7aef\u3002</p> <p>\u9879\u76ee\u5730\u5740: aws-samples/sample-client-for-amazon-bedrock</p>"},{"location":"zh/user-manual/sample-client-for-bedrock/#_2","title":"\u5feb\u901f\u542f\u52a8","text":"<p>\u60a8\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u6e90\u4ee3\u7801\u542f\u52a8 BRClient\uff0c\u4e5f\u53ef\u4ee5\u4e0b\u8f7d\u5404\u4e2a\u5e73\u53f0\u7684\u5b89\u88c5\u7a0b\u5e8f\u3002</p> <p>\u5982\u679c\u60a8\u90e8\u7f72\u4e86\u672c\u9879\u76ee\uff08BRConnector\uff09\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u8fd9\u4e2a URL \u542f\u52a8\uff1ahttp(s)://your-endpoint/brclient/\u3002</p>"},{"location":"zh/user-manual/sample-client-for-bedrock/#_3","title":"\u8bbe\u7f6e","text":"<p>\u8fdb\u5165 Web \u754c\u9762\u540e\uff0c\u60a8\u9700\u8981\u5728\u8bbe\u7f6e\u4e2d\u542f\u7528 BRConnector\u3002</p> <p></p> <p>\u5176\u4e2d BRConnector Endpoint \u586b\u5199\u60a8\u7684 BRConnector \u7684\u8def\u5f84\u7684\u6839\u5373\u53ef\u3002</p> <p>API Key \u586b\u5199 BRConnector \u9881\u53d1\u7684 Key\u3002</p> <p>\u8bbe\u7f6e\u597d\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u5237\u65b0\u9875\u9762\uff0c\u4ece BRConnector \u4e2d\u83b7\u53d6\u6a21\u578b\u5217\u8868\u3002\u4ee5\u540e\u6bcf\u6b21\u8bbe\u7f6e\u597d\u65b0\u7684\u6a21\u578b\u540e\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u5237\u65b0\u9875\u9762\u83b7\u53d6\u65b0\u6a21\u578b\u7684\u5217\u8868\u3002</p>"}]}