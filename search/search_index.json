{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sample Connector for Bedrock","text":"<p>Integrating AWS Generative AI is now easy!</p> <p>Start with the link below:</p> <ul> <li> <p>Quick start</p> </li> <li> <p>Deploy using Cloudformation</p> </li> <li> <p>Development</p> </li> </ul>"},{"location":"home/","title":"Introduction","text":"<p>This is a bedrock API forwarding tool that can issue virtual keys, log chats, and manage costs.</p> <p>It is compatible with any OPENAI client that can define Host and API Key.</p>"},{"location":"home/#key-features","title":"Key Features","text":""},{"location":"home/#modelsplatform-support","title":"Models/Platform Support","text":"<ul> <li> <p>A provider for Search Engine support [Since Docker image version 0.0.10]. See here</p> </li> <li> <p>An AWS command executor [Since Docker image version 0.0.10]. See here</p> </li> <li> <p>Bedrock SDXL [Since Docker image version 0.0.9]. See Screenshots.</p> </li> <li> <p>Sagemaker LMI [Since Docker image version 0.0.8]</p> </li> <li> <p>Amazon Bedrock Converse API [Since Docker image version 0.0.6]</p> </li> <li> <p>Ollama [Since Docker image version 0.0.6]</p> </li> <li> <p>Bedrock Knowledge base. See Instruction. [Since Docker image version 0.0.4]</p> </li> <li> <p>Mistral, model name options: [Since Docker image version 0.0.2]</p> </li> <li>mistral-7b</li> <li>mistral-large</li> <li>mistral-8x7b</li> <li> <p>mistral-small (region: us-east-1)</p> </li> <li> <p>Claude 3, model name options: [Since Docker image version 0.0.1]</p> </li> <li>claude-3-sonnet (this is the default model)</li> <li>claude-3-haiku</li> <li> <p>claude-3-opus</p> </li> <li> <p>LLama 3, model name options: [Since Docker image version 0.0.1]</p> </li> <li>llama3-8b</li> <li>llama3-70b</li> </ul>"},{"location":"home/#api-key-and-cost-management","title":"API Key and Cost Management","text":"<ul> <li>Create API Keys. Can be created for regular users and administrators. Regular users can chat, while administrators can manage API Keys and costs.</li> <li>Record the cost of each call and use it as the basis for cost control.</li> <li>Cost Control. You can set a monthly quota and account balance for each API Key. When the monthly quota or account balance is insufficient, it cannot be used.</li> <li>Calculate the overall cost.</li> </ul> <p>[!IMPORTANT] You can customize the pricing for your model. Please refer to the official website for the Bedrock pricing.</p> <p>The cost calculation of this project cannot serve as the billing basis for AWS. Please refer to the AWS bill for actual charges.</p> <p></p>"},{"location":"home/#model-management","title":"Model management","text":"<p>Models and their parameters can be defined from the backend.</p> <p>Model Access Control [Since Docker image version 0.0.6]</p> <ul> <li> <p>Models can be bound to Groups.</p> </li> <li> <p>Models can be bound to API keys.</p> </li> </ul> <p></p>"},{"location":"home/changelogs/","title":"Change Logs","text":""},{"location":"home/changelogs/#0010","title":"0.0.10","text":"<p>2024-07-24</p>"},{"location":"home/deployment/","title":"Quick Deploy BRConnector using Cloudformation","text":""},{"location":"home/deployment/#supported-region","title":"Supported Region","text":"<p>Cloudformation template are verified in following regions:</p> <ul> <li>us-east-1</li> <li>us-west-2</li> </ul>"},{"location":"home/deployment/#prerequisites","title":"Prerequisites","text":"<p>Enable Claude 3 Sonnet or Haiku in your region - If you are new to using Anthropic models, go to the\u00a0Amazon Bedrock console\u00a0and choose\u00a0Model access\u00a0on the bottom left pane. Request access separately for Claude 3 Sonnet or Haiku.</p>"},{"location":"home/deployment/#components","title":"Components","text":"<p>Following key components will be included in this Cloudformation template: </p> <ul> <li>Cloudfront</li> <li>BRConnector on Lambda or EC2</li> <li>RDS PostgreSQL or PostgreSQL container on EC2</li> <li>ECR with pull through cache enabled</li> </ul>"},{"location":"home/deployment/#deploy-guide","title":"Deploy Guide","text":"<ul> <li>Download quick-build-brconnector.yaml and upload to Cloudformation console or click this button to launch directly.</li> </ul> <ul> <li>VPC parameters<ul> <li>Choose to create a new VPC or a existing VPC </li> <li>Choose one PUBLIC subnet for EC2 and two PRIVATE subnets for Lambda and RDS (subnet group need 2 AZ at least)</li> </ul> </li> </ul> <ul> <li>Compute parameters<ul> <li>Choose ComputeType for BRConnector, Lambda or EC2</li> <li>For EC2 settings<ul> <li>Now only support Amazon Linux 2023</li> <li>You could choose to create PostgreSQL as container in same EC2 (<code>StandaloneDB</code> to false), or create standalone RDS PostgreSQL as backend (<code>StandaloneDB</code> to true)</li> </ul> </li> <li>For Lambda settings<ul> <li>PUBLIC Function URL will be used. Please ensure this security setting is acceptable</li> <li>Define your private repository name prefix string</li> <li>Always create RDS PostgreSQL (<code>StandaloneDB</code> to true)</li> </ul> </li> </ul> </li> </ul> <ul> <li>PostgreSQL parameters<ul> <li>Default PostgreSQL password is <code>mysecretpassword</code></li> <li>If you choose <code>StandaloneDB</code> to false, PostgreSQL will running on EC2 as container. RDS PostgreSQL will be create if this option is true.</li> <li>Keep others as default</li> </ul> </li> </ul> <ul> <li>Debugging parameters<ul> <li>If you choose Lambda as ComputeType, you could choose to delete EC2 after all resources deploy successfully. This EC2 is used for compiling and building BRConnector container temporarily. </li> <li>Don\u2019t delete EC2 if you choose EC2 as ComputeType</li> <li>If you set <code>true</code> to AutoUpdateBRConnector, one script will be add to ec2 crontab</li> </ul> </li> </ul> <ul> <li>Until deploy successfully, go to output page and copy Cloudfront URL and first user key to your bedrock client settings page.</li> </ul> <ul> <li>Also you could connect to <code>BRConnector</code> EC2 instance with SSM Session Manager (docs)</li> </ul>"},{"location":"home/deployment/#update-brconnector","title":"Update BRConnector","text":""},{"location":"home/deployment/#autoupdate-is-true","title":"AutoUpdate is true","text":"<ul> <li>Check your ECR settings, if has rules in pull through cache page, you have enabled this feature to update ECR image with upstream repo automatically.</li> <li>Go to codebuild page, one project will be triggered to build regularly to update your lambda image automatically</li> <li>Images in EC2 will be updated using state manager in SSM automatically.</li> </ul>"},{"location":"home/deployment/#autoupdate-is-false","title":"AutoUpdate is false","text":"<ul> <li>Check your ECR settings, if has rules in pull through cache page, you have enabled this feature to update ECR image with upstream repo automatically.</li> <li>Go to codebuild page, one project could be triggered to update your lambda image manually. Click <code>Start build</code> to update lambda image.</li> <li>Images in EC2 will NOT be updated using state manager in SSM automatically due to no association created. Reference document in SSM to execute commands in EC2 manually.</li> </ul>"},{"location":"home/deployment/#ecr-without-pull-through-cache-enabled-only-for-previous-cfn-version","title":"ECR without pull through cache enabled (only for previous cfn version)","text":"<ul> <li> <p>following this script to update image manually if you do not enable ECR pull through cache <pre><code>export AWS_DEFAULT_REGION=us-west-2\nexport ACCOUNT_ID=123456789012\nexport PrivateECRRepository=your_private_repo_name\n\naws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com\n\n# pull/tag/push arm64 image for lambda\ndocker pull --platform=linux/arm64 public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock-lambda\ndocker tag public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock-lambda ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:arm64\ndocker push ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:arm64\n\n# pull/tag/push amd64 image for lambda\ndocker pull --platform=linux/amd64 public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock-lambda\ndocker tag public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock-lambda ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:amd64\ndocker push ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:amd64\n\n# create/push manifest file\ndocker manifest create ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:latest --amend ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:arm64 --amend ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:amd64\ndocker manifest annotate ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:latest ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:arm64 --os linux --arch arm64\ndocker manifest annotate ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:latest ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:amd64 --os linux --arch amd64\ndocker manifest push ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:latest\n</code></pre></p> </li> <li> <p>update lambda image with correct architecture</p> </li> <li>or login to ec2 to update local image and restart brconnector container</li> </ul>"},{"location":"home/deployment/#migrating-to-new-rds-postgresql-database","title":"Migrating to new RDS PostgreSQL database","text":"<p>working \u2026</p>"},{"location":"home/development/","title":"Development","text":""},{"location":"home/development/#development_1","title":"Development","text":""},{"location":"home/development/#installation","title":"installation","text":"<p>Clone the repository.</p> <p>Install dependencies:</p> <pre><code>npm install\n# or\nyarn\n</code></pre>"},{"location":"home/development/#environment","title":"Environment","text":"<p>the .env file</p> <p>Place it in the root directory of the project.</p> <pre><code>PGSQL_HOST=127.0.0.1\nPGSQL_DATABASE=brconnector_db\nPGSQL_USER=postgres\nPGSQL_PASSWORD=mysecretpassword\nPGSQL_DEBUG_MODE=ok\nADMIN_API_KEY=br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nDEBUG_MODE=true\n</code></pre> <p>The connector supports the following environment variables:</p> Key Required Default value Description ADMIN_API_KEY yes You need to set this value to generate the first API key. PGSQL_HOST no The address of the PostgreSQL. If the database is not configured, then the connector is just a pure proxy. PGSQL_PORT no 5432 The port of the PostgreSQL. PGSQL_DATABASE no The name of the PostgreSQL database. PGSQL_USER no The login user for the PostgreSQL. PGSQL_PASSWORD no The password user for the PostgreSQL. PGSQL_MAX no 80 The maximum connection pool size for PostgreSQL. PGSQL_DEBUG_MODE no false If you set this parameter, it will print out the SQL statements and parameters in the console. AWS_ACCESS_KEY_ID no If your application has been authorized through an IAM policy, you don\u2019t need to set this variable. AWS_SECRET_ACCESS_KEY no If your application has been authorized through an IAM policy, you don\u2019t need to set this variable. AWS_DEFAULT_REGION no \u2018us-east-1\u2019 DEBUG_MODE no false If you set this parameter, it will print out a lot of debugging information in the console. DISABLE_UI no false Setting this value will not publish the front-end UI. SMTP_HOST no SMTP server host address. Setting up an SMTP Server allows you to send your API key directly to the user\u2019s email inbox. SMTP_PORT no 465 SMTP server port number SMTP_USER no SMTP server username SMTP_PASS no SMTP server password SMPT_FROM no SMTP sender email address, your SMTP server maybe verify this"},{"location":"home/development/#run-backend","title":"Run backend","text":"<pre><code>npm run dev\n# or\nyarn dev\n</code></pre> <p>If you have configured postgres, the tables will be created automatically.</p>"},{"location":"home/development/#run-fontend","title":"Run fontend","text":"<pre><code>npm run dev-ui\n# or\nyarn dev-ui\n</code></pre>"},{"location":"home/development/#build","title":"Build","text":""},{"location":"home/development/#build-the-backend-and-frontend-together","title":"Build the backend and frontend together","text":"<pre><code>npm run build\n# or\nyarn build\n</code></pre> <p>The above command will compile the frontend and backend applications into the dist/public and dist/server directories, respectively.</p> <p>After a successful compilation, navigate to the dist directory and execute <code>node server/index.js</code>.</p> <p>If you have not disabled the WebUI, http://localhost:8866/manager will be bound to the WebUI.</p>"},{"location":"home/development/#build-back-end-option","title":"Build back-end (Option)","text":"<pre><code>npm run build-server\n# or\nyarn build-server\n</code></pre>"},{"location":"home/development/#build-front-end-option","title":"Build front-end (Option)","text":"<pre><code>npm run build-ui\n# or\nyarn build-ui\n</code></pre>"},{"location":"home/development/#build-docker-image","title":"Build docker image","text":"<p>The content of the Dockerfile:</p> <pre><code>FROM node:20\n\nCOPY ./dist /app\nWORKDIR /app\nCOPY ./src/scripts/* ./src/scripts/\nCOPY ./package.json .\n\nRUN npm install --omit=dev\n\nHEALTHCHECK --interval=5s --timeout=3s \\\n  CMD curl -fs http://localhost:8866/ || exit 1\n\nEXPOSE 8866\n\nCMD [\"node\", \"server/index.js\"]\n</code></pre> <p>Please note: The above code is not included in this project. Please save the above content in the project\u2019s root directory <code>./Dockerfile</code>.</p> <p>Then execute the following command:</p> <pre><code>docker build -t &lt;registry-repo-tag&gt; .\n</code></pre>"},{"location":"home/development/#api-specification","title":"API Specification","text":""},{"location":"home/development/#llm-api","title":"LLM API","text":"<p>Completions</p> <pre><code>POST /v1/chat/completions\nContent-Type: application/json\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n{\n  \"model\": \"claude-3-sonnet\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"ping\"\n    }\n  ],\n  \"stream\": true,\n  \"temperature\": 1,\n  \"max_tokens\": 4096\n}\n</code></pre> <p>List supported models</p> <pre><code>GET /v1/models\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre>"},{"location":"home/development/#admin-api","title":"Admin API","text":"<p>Create an api key</p> <pre><code>POST /admin/api-key/apply\nContent-Type: application/json\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n{\n  \"name\": \"jack\",\n  \"group_id\": 1,\n  \"role\": \"user\",\n  \"email\": \"\",\n  \"month_quota\": 1.00\n}\n</code></pre> <p>Create an api key with admin role</p> <pre><code>POST /admin/api-key/apply\nContent-Type: application/json\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n{\n  \"name\": \"rob\",\n  \"group_id\": 1,\n  \"role\": \"admin\",\n  \"email\": \"\"\n}\n</code></pre> <p>Update and api key\u2019s info</p> <pre><code>POST /admin/api-key/update\nContent-Type: application/json\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n{\n  \"id\": 2,\n  \"name\": \"jack\",\n  \"month_quota\": 10.00\n}\n</code></pre> <p>Recharge up an API key</p> <pre><code>POST /admin/api-key/recharge\nContent-Type: application/json\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n{\n  \"api_key\": \"br-xxxxxxxxxxxxxxx\",\n  \"balance\": 0.23\n}\n</code></pre> <p>recharge history</p> <pre><code>GET /admin/payment/list?key_id=\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre> <p>List api keys</p> <pre><code>GET /admin/api-key/list?q=&amp;limit=10&amp;offset=\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre> <p>List sessions</p> <pre><code>GET /admin/session/list?q=&amp;limit=10&amp;offset=&amp;key_id=\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre> <p>List threads / histories</p> <pre><code>GET /admin/thread/list?q=&amp;limit=10&amp;offset=&amp;key_id=&amp;session_id=\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre> <p>Update Config Region</p> <pre><code>POST /admin/config/region\nContent-Type: application/json\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n{\n \"region\":\"us-east-1,us-west-2\"\n}\n</code></pre> <p>List Config Region</p> <pre><code>GET /admin/config/region\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre>"},{"location":"home/development/#user-api","title":"User API","text":"<p>My sessions</p> <pre><code>GET /user/session/list?q=&amp;limit=10&amp;offset=\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre> <p>My session detail</p> <pre><code>GET /user/session/detail/1\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre> <p>My threads / histories</p> <pre><code>GET /user/thread/list?q=&amp;limit=10&amp;offset=&amp;session_id=\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre> <p>My thread detail</p> <pre><code>GET /user/thread/detail/1\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre>"},{"location":"home/quick-start/","title":"Quick start","text":""},{"location":"home/quick-start/#1-prepare-a-server-to-host-the-connector","title":"1. Prepare a server to host the connector","text":"<p>Launch an EC2 on AWS or any other server with docker support.</p>"},{"location":"home/quick-start/#2-run-postgres-with-docker","title":"2. Run Postgres with docker","text":"<p>Launch a docker container to host postgres with the following shell command:</p> <pre><code>docker run --name postgres \\\n  -e POSTGRES_PASSWORD=mysecretpassword \\\n  -p 5432:5432 \\\n  -d postgres\n</code></pre> <p>Then create a database named <code>brconnector_db</code> with the following command.</p> <p>At first, attach to the prostgress container:</p> <pre><code>docker exec -it postgres psql -U postgres\n</code></pre> <p>Then, in the SQL command line of postgres, run the following command to create the database:</p> <pre><code>CREATE DATABASE brconnector_db;\n</code></pre> <p>The database name is not necessary to be <code>brconnector_db</code>, you can use what ever valid database name you want.</p> <p>If you use your own database name, make sure that you remember the database name and replace <code>brconnector_db</code> with your database name.</p>"},{"location":"home/quick-start/#3-start-the-connector-server-with-docker","title":"3. Start the connector server with docker","text":"<p>Run the following docker command directly to start the connector container.</p> <p>Make sure to replace the value of access key, secret key, region to be right ones.</p> <p>And, important! replace the value of ADMIN_API_KEY to be a complex key instead of using the simple one in the sample.</p> <pre><code>docker run --name brconnector \\\n --restart always --pull always \\\n -p 8866:8866 \\\n -e AWS_ACCESS_KEY_ID=xxxx \\\n -e AWS_SECRET_ACCESS_KEY=xxxxx \\\n -e AWS_DEFAULT_REGION=us-east-1 \\\n -e PGSQL_HOST=172.17.0.1 \\\n -e PGSQL_DATABASE=brconnector_db \\\n -e PGSQL_USER=postgres \\\n -e PGSQL_PASSWORD=mysecretpassword \\\n -e ADMIN_API_KEY=br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \\\n -d cloudbeer/sample-connector-for-bedrock\n</code></pre>"},{"location":"home/quick-start/#4-test-the-connector-server","title":"4. Test the connector server","text":"<p>Now, you have the first admin user with the API_KEY \u201cbr_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u201d.</p> <p>And the server export port 8866 to the hosting EC2.</p> <p>Test the server with the API_Key using <code>curl</code> command:</p> <pre><code>curl \"http://localhost:8866/admin/api-key/list\" \\\n  -H \"Authorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" \n</code></pre> <p>You will get something like the following if every things go well:</p> <pre><code>{\"success\":true,\"data\":{\"items\":[],\"total\":\"0\",\"limit\":20,\"offset\":0}}\n</code></pre>"},{"location":"home/quick-start/#5-creat-the-first-admin-user","title":"5. Creat the first admin user","text":"<p>The API_KEY configed above is only used for booting the server and create first admin user.</p> <p>This API_KEY is not designed to be used as admin user or normal user.</p> <p>Create the first admin user with the following command:</p> <pre><code>curl -X POST \"http://localhost:8866/admin/api-key/apply\" \\\n     -H \"Content-Type: application/json\" \\\n     -H \"Authorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" \\\n     -d '{\"name\": \"adminuser\",\"group_id\": 1,\"role\": \"admin\",\"email\": \"\", \"month_quota\":\"20\"}'\n</code></pre> <p>You will get some response like the following:</p> <pre><code>{\"success\":true,\"data\":{\"id\":1,\"name\":\"adminuser\",\"email\":\"\",\"api_key\":\"br-someotherkeyvaluexxxxx\",\"role\":\"admin\",\"month_quota\":\"20.0000000000\",\"balance\":\"0.0000000000\"}}\n</code></pre> <p>Record the new api_key for the new user, this api_key can be used to config your client to chat. and this api_key can be used to login the connector\u2019s manager WebUI to manage other api_key.</p>"},{"location":"home/quick-start/#6-config-client-to-connect-to-the-connector-server","title":"6. Config client to connect to the connector server","text":"<p>You should expose the connector server with HTTPS.</p> <p>One simple way to do it on AWS is creating a CloudFront CDN to provide SSL support.</p> <p>For more information about setting up CloudFront on AWS, please refer to official document of AWS.</p> <p>Open a client that can define Host and API Key for OpenAI.</p> <p>In Host field enter the CloudFront url.</p> <p>In the \u201cAPK Key\u201d field, enter the API_Key of your first admin user, which is the one you created in step 5.</p> <p>Then, open a new chat to test.</p> <p>If every thing goes well, you can start to chat.</p> <p>[!TIP]  </p> <p>You can use the sample client provided by https://github.com/aws-samples/sample-client-for-amazon-bedrock to test this project.</p> <p>Since 0.0.8, this client has been built into the docker image. The access address is: https://your-endpoint/brclient/</p>"},{"location":"home/quick-start/#7-the-connectors-webui","title":"7. The connector\u2019s WebUI","text":"<p>If you have not set the environment variable DISABLE_UI, you can now access the BRConnector WebUI via https://your-endpoint/manager.</p> <p>You can log in and manage it using the API key you just generated. Enter https://your-endpoint as the Host.</p>"},{"location":"providers/aws-executor/","title":"aws-executor: AWS command executor","text":"<p>With this Provider, you can execute AWS command using natural language and get the execution results.</p> <p>The role for executing AWS commands and the role for running BRConnector are currently the same, so you need to grant the appropriate permissions to the current role.</p> <p>Warning</p> <p>Do not grant write permissions to critical resources, as the command lines parsed by the current AI are not stable. However, you can still refer to the command lines suggested by the AI.</p>"},{"location":"providers/aws-executor/#model-configuration","title":"Model configuration","text":"<p>The parameter configuration is as follows:</p> <p>Name: some-model</p> <p>Provider: aws-executor</p> <p>Configuration:</p> <pre><code>{\n  \"localLlmModel\": \"claude-3-sonnet\"\n}\n</code></pre> <p>localLlmModel must be configured as a model that supports function calling and already exists in BRConnector.</p> <p>Note</p> <p>You need to configure a claude3+ model provided by the bedrock-converse provider, as other models do not yet have the capability for function calling. The default claude3 model in the system is not driven by converse. If you use these models, you need to update the original configuration to the bedrock-converse provider. Please note to modify the key \u2018model_id\u2019 to \u2018modelId\u2019.</p> <p>And You must install aws cli v2 in the BRConnector host.</p>"},{"location":"providers/aws-executor/#screenshots-in-brclient","title":"Screenshots in BRClient","text":""},{"location":"providers/bedrock-converse/","title":"bedrock-converse","text":""},{"location":"providers/bedrock-knowledge-base/","title":"bedrock-knowledge-base","text":""},{"location":"providers/bedrock-knowledge-base/#create-a-knowledge-base-instance","title":"Create a knowledge base instance","text":"<p>Refer to this document: Create a knowledge base</p>"},{"location":"providers/bedrock-knowledge-base/#create-a-custom-model","title":"Create a custom model","text":"<p>Moel Configuration:</p> <pre><code>{\n  \"region\": \"&lt;your-region&gt;\",\n  \"summaryModel\": \"claude-3-sonnet\",\n  \"knowledgeBaseId\": \"&lt;your-kb-id&gt;\"\n}\n</code></pre> <ul> <li>knowledgeBaseId: the knowledge base id.</li> <li>summaryModel: support claude-3-sonnet, claude-3-haiku or claude-3-opus</li> </ul>"},{"location":"providers/bedrock-knowledge-base/#api-calls","title":"API Calls","text":"<p>You can use normal api invoke, the Bedrock connector will pop last message to chat with the knowledge base.</p> <pre><code>POST /v1/chat/completions\nContent-Type: application/json\nAuthorization: Bearer br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\n{\n  \"model\": \"your-custom-model-name\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"how to protect s3 data?\"\n    }\n  ]\n}\n</code></pre>"},{"location":"providers/bedrock-knowledge-base/#use-brclient","title":"Use BRClient","text":""},{"location":"providers/ollama/","title":"ollama: Models on-premises","text":""},{"location":"providers/painter/","title":"painter: Draw using the bedrock paint model","text":""},{"location":"providers/painter/#configuration","title":"Configuration","text":"<p>Add a model in the /manager UI.</p> <p></p> <ul> <li>Name: Any words</li> <li>Provider: painter</li> <li>Multiple: disable</li> <li>Price-in: any number</li> <li>Price-out: any number</li> <li>Config: Please see the sample below.</li> </ul> <pre><code>{\n  \"regions\": [\n    \"us-east-1\", \"us-west-2\"\n  ],\n  \"s3Bucket\": \"&lt;your-bucket&gt;\",\n  \"s3Prefix\": \"&lt;your-prefix&gt;\",\n  \"s3Region\": \"us-east-1\",\n  \"sdModelId\": \"stability.stable-diffusion-xl-v1\",\n  \"llmModelId\": \"anthropic.claude-3-sonnet-20240229-v1:0\"\n}\n</code></pre> <p>Then grant this model to  group or apikey.</p>"},{"location":"providers/painter/#features-and-screenshots-in-brclient","title":"Features and Screenshots in BRClient","text":"<p>Features:</p> <ul> <li>Supports natural language conversation</li> <li>Supports multi-turn conversation to refine prompts</li> <li>Supports multiple languages</li> <li>Supports image size and aspect ratio ratio</li> </ul> <p>Screenshots in BRClient:</p> <p>BRClient has been built into the Docker image (since version 0.0.8). Access address: your-host:8866/brclient/</p> <p></p> <p></p>"},{"location":"providers/sagemaker-lmi/","title":"sagemaker-lmi: Connect to Sagemaker LLM modes","text":""},{"location":"providers/web-miner/","title":"web-miner\uff1aSeach the internet","text":"<p>This Provider can turn your question into search keywords, obtain results through search engines, and then summarize them into corresponding answers.</p> <p>Tip</p> <p>Do not ask too many rounds of questions, because this Provider will summarize your previous prompts to keywords for searching.</p> <p>In BRClient, too long information is summarized into a single history, losing the earliest user input, which results in the AI answering a far cry from what you want.</p>"},{"location":"providers/web-miner/#model-configuration","title":"Model configuration","text":"<p>The parameter configuration is as follows:</p> <p>Name: some-model</p> <p>Provider: web-miner</p> <p>Configuration:</p> <pre><code>{\n  \"sites\": [\n    \"aws.amazon.com\",\n    \"www.amazonaws.cn\",\n    \"repost.aws\",\n    \"stackoverflow.com\"\n  ],\n  \"localLlmModel\": \"claude-3-sonnet\",\n  \"searxng\": {\n    \"host\": \"http://127.0.0.1:8081/\"\n  },\n  \"serpapi\": {\n    \"apiKey\": \"xxx......\",\n    \"engine\": \"google\"\n  },\n  \"google\": {\n    \"googleAPIKey\": \"AIxxxxxx_xxxxxxxx\",\n    \"googleCSECX\": \"00xxxc000a2xxxxx\"\n  }\n}\n</code></pre> <ul> <li>sites: Limit the search to these websites, you can leave this parameter unspecified.</li> <li>localLlmModel: must be configured as a model that supports function calling and already exists in BRConnector.</li> <li>the search tools below are supported in order:<ul> <li>searxng</li> <li>SerpAPI</li> <li>google</li> </ul> </li> </ul>"},{"location":"providers/web-miner/#search-engines","title":"Search engines","text":""},{"location":"providers/web-miner/#searxng","title":"searxng","text":"<p>Visit https://docs.searxng.org/ for more information.</p> <p>\u521b\u5efa\u4e00\u4e2a settings.yml \u6587\u4ef6\uff0c\u589e\u52a0\u8f93\u51fa\u683c\u5f0f json\u3002</p> <pre><code>use_default_settings: true\nserver:\n    secret_key: \"some-Other-PWD\"   # change this!\n    bind_address: \"0.0.0.0\"\nsearch:\n  formats:\n\n    - html\n    - json\n</code></pre> <p>Start searxng:</p> <pre><code>docker run --rm -d -p 8081:8080 \\\n -e \"BASE_URL=http://localhost:8081/\" \\\n -e \"INSTANCE_NAME=searxng\" searxng/searxng\n</code></pre> <p>Then you will get the searxng endpoint: http://127.0.0.1:8081/, configure it to searxng\u2019s host node.</p>"},{"location":"providers/web-miner/#serpapi","title":"SerpAPI","text":"<p>For more information, visit https://serpapi. com/.</p> <p>Once you\u2019re logged in, you can see Api key in a prominent place on it.</p> <p>The engine parameter supports the following, and the default is google:</p> <ul> <li>google</li> <li>bing</li> <li>baidu</li> <li>duckduckgo</li> <li>yahoo</li> <li>yandex </li> <li>yelp</li> <li>naver</li> </ul> <p>SerpAPI is not free</p> <p>Exceeding the monthly free limit will be charged.</p>"},{"location":"providers/web-miner/#google","title":"Google","text":"<p>To use the Google Custom Search Engine, you need the following 2 keys, click the link to create them:</p> <ul> <li> <p>Google API Key</p> </li> <li> <p>Google CSECX</p> </li> </ul> <p>Google CSE is not free</p> <p>Exceeding the daily free limit will be charged.</p>"},{"location":"providers/web-miner/#screenshots-in-brclient","title":"Screenshots in BRClient","text":""},{"location":"user-manual/introduce/","title":"Introduction","text":""},{"location":"user-manual/management/","title":"Management","text":""},{"location":"user-manual/management/#login-as-administrator","title":"Login as Administrator","text":""},{"location":"user-manual/management/#api-keys-management","title":"API keys management","text":""},{"location":"user-manual/management/#models","title":"Models","text":""},{"location":"user-manual/management/#groups","title":"Groups","text":""},{"location":"user-manual/sample-client-for-bedrock/","title":"Sample client for Bedrock Manual","text":""},{"location":"user-manual/sample-client-for-bedrock/#what-is","title":"What is","text":""},{"location":"user-manual/sample-client-for-bedrock/#quick-start","title":"Quick start","text":""},{"location":"user-manual/sample-client-for-bedrock/#tricks","title":"Tricks","text":""},{"location":"zh/","title":"Sample Connector for Bedrock","text":"<p>\u96c6\u6210 AWS \u751f\u6210\u5f0f AI\uff0c\u73b0\u5728\u975e\u5e38\u7b80\u5355\uff01</p> <p>\u4ece\u4e0b\u9762\u7684\u94fe\u63a5\u5f00\u59cb\uff1a</p> <ul> <li> <p>\u5feb\u901f\u542f\u52a8</p> </li> <li> <p>\u4f7f\u7528 Cloudformation \u5feb\u901f\u90e8\u7f72</p> </li> <li> <p>\u5f00\u53d1\u6a21\u5f0f</p> </li> </ul>"},{"location":"zh/home/","title":"\u4ecb\u7ecd","text":"<p>Sample Connector for Bedrock \uff08\u4ee5\u4e0b\u7b80\u79f0 BRConnector\uff09\u662f\u4e00\u6b3e\u8f6f\u4ef6\u3002</p>"},{"location":"zh/home/changelogs/","title":"\u66f4\u65b0\u65e5\u5fd7","text":""},{"location":"zh/home/deployment/","title":"\u4f7f\u7528 Cloudformation \u5feb\u901f\u90e8\u7f72","text":""},{"location":"zh/home/deployment/#_1","title":"\u652f\u6301\u7684\u533a\u57df","text":"<p>Cloudformation \u6a21\u677f\u5df2\u5728\u4ee5\u4e0b\u533a\u57df\u9a8c\u8bc1\uff1a</p> <ul> <li>us-east-1</li> <li>us-west-2</li> </ul>"},{"location":"zh/home/deployment/#_2","title":"\u5148\u51b3\u6761\u4ef6","text":"<p>\u5728\u60a8\u7684\u533a\u57df\u542f\u7528 Claude 3 Sonnet \u6216 Haiku - \u5982\u679c\u60a8\u662f\u7b2c\u4e00\u6b21\u4f7f\u7528 Anthropic \u6a21\u578b\uff0c\u8bf7\u8f6c\u5230\u00a0Amazon Bedrock \u63a7\u5236\u53f0\u00a0\u5e76\u5728\u5de6\u4e0b\u89d2\u7a97\u683c\u4e2d\u9009\u62e9\u00a0\u6a21\u578b\u8bbf\u95ee\u3002\u5355\u72ec\u8bf7\u6c42 Claude 3 Sonnet \u6216 Haiku \u7684\u8bbf\u95ee\u6743\u9650\u3002</p>"},{"location":"zh/home/deployment/#_3","title":"\u7ec4\u4ef6","text":"<p>\u6b64 Cloudformation \u6a21\u677f\u5c06\u5305\u542b\u4ee5\u4e0b\u5173\u952e\u7ec4\u4ef6\uff1a</p> <ul> <li>Cloudfront</li> <li>Lambda \u6216 EC2 \u4e0a\u7684 BRConnector</li> <li>EC2 \u4e0a\u7684 RDS PostgreSQL \u6216 PostgreSQL \u5bb9\u5668</li> <li>\u542f\u7528\u4e86\u62c9\u53d6\u7f13\u5b58\u7684 ECR</li> </ul>"},{"location":"zh/home/deployment/#_4","title":"\u90e8\u7f72\u6307\u5357","text":"<ul> <li>\u4e0b\u8f7d quick-build-brconnector.yaml \u5e76\u4e0a\u4f20\u5230 Cloudformation \u63a7\u5236\u53f0\u6216\u5355\u51fb\u6b64\u6309\u94ae\u76f4\u63a5\u542f\u52a8\u3002</li> </ul> <ul> <li>VPC \u53c2\u6570<ul> <li>\u9009\u62e9\u521b\u5efa\u65b0 VPC \u6216\u73b0\u6709 VPC</li> <li>\u4e3a EC2 \u9009\u62e9\u4e00\u4e2a\u516c\u5171\u5b50\u7f51\uff0c\u4e3a Lambda \u548c RDS \u9009\u62e9\u4e00\u4e2a\u79c1\u6709\u5b50\u7f51\uff08 RDS \u5b50\u7f51\u7ec4\u81f3\u5c11\u9700\u8981 2 \u4e2a\u53ef\u7528\u533a\uff09</li> </ul> </li> </ul> <ul> <li>\u8ba1\u7b97\u53c2\u6570<ul> <li>\u9009\u62e9 BRConnector\u3001Lambda \u6216 EC2 \u7684\u8ba1\u7b97\u7c7b\u578b</li> <li>\u5bf9\u4e8eEC2 \u8bbe\u7f6e<ul> <li>\u73b0\u5728\u4ec5\u652f\u6301 Amazon Linux 2023</li> <li>\u60a8\u53ef\u4ee5\u9009\u62e9\u5728\u540c\u4e00 EC2 \u4e2d\u521b\u5efa PostgreSQL \u4f5c\u4e3a\u5bb9\u5668\uff08<code>StandaloneDB</code> \u4e3a false\uff09\uff0c\u6216\u521b\u5efa\u72ec\u7acb\u7684 RDS PostgreSQL \u4f5c\u4e3a\u540e\u7aef\uff08<code>StandaloneDB</code> \u4e3a true\uff09</li> </ul> </li> <li>\u5bf9\u4e8e Lambda \u8bbe\u7f6e<ul> <li>\u5c06\u4f7f\u7528 PUBLIC \u51fd\u6570 URL\u3002\u8bf7\u786e\u4fdd\u6b64\u5b89\u5168\u8bbe\u7f6e\u662f\u53ef\u63a5\u53d7\u7684</li> <li>\u5b9a\u4e49\u60a8\u7684\u79c1\u6709\u5b58\u50a8\u5e93\u540d\u79f0\u524d\u7f00\u5b57\u7b26\u4e32</li> <li>\u59cb\u7ec8\u521b\u5efa RDS PostgreSQL\uff08<code>StandaloneDB</code> \u4e3a true\uff09</li> </ul> </li> </ul> </li> </ul> <ul> <li>PostgreSQL \u53c2\u6570<ul> <li>\u9ed8\u8ba4 PostgreSQL \u5bc6\u7801\u4e3a <code>mysecretpassword</code></li> <li>\u5982\u679c\u60a8\u9009\u62e9 <code>StandaloneDB</code> \u4e3a false\uff0cPostgreSQL \u5c06\u4f5c\u4e3a\u5bb9\u5668\u5728 EC2 \u4e0a\u8fd0\u884c\u3002\u5982\u679c\u6b64\u9009\u9879\u4e3a true\uff0c\u5c06\u521b\u5efa RDS PostgreSQL\u3002</li> <li>\u5176\u4ed6\u4fdd\u6301\u9ed8\u8ba4</li> </ul> </li> </ul> <ul> <li>\u8c03\u8bd5\u53c2\u6570<ul> <li>\u5982\u679c\u9009\u62e9 Lambda \u4f5c\u4e3a ComputeType\uff0c\u5219\u53ef\u4ee5\u9009\u62e9\u5728\u6240\u6709\u8d44\u6e90\u90e8\u7f72\u6210\u529f\u540e\u5220\u9664 EC2\u3002\u6b64 EC2 \u6682\u65f6\u7528\u4e8e\u7f16\u8bd1\u548c\u6784\u5efa BRConnector \u5bb9\u5668\u3002</li> <li>\u5982\u679c\u9009\u62e9 EC2 \u4f5c\u4e3a ComputeType\uff0c\u8bf7\u4e0d\u8981\u5220\u9664 EC2</li> <li>\u5982\u679c\u5c06 AutoUpdateBRConnector \u8bbe\u7f6e\u4e3a <code>true</code>\uff0c\u5219\u4f1a\u5c06\u4e00\u4e2a\u811a\u672c\u6dfb\u52a0\u5230 codebuild \u4e2d</li> </ul> </li> </ul> <ul> <li>\u76f4\u5230\u90e8\u7f72\u6210\u529f\uff0c\u8f6c\u5230\u8f93\u51fa\u9875\u9762\u5e76\u5c06 Cloudfront URL \u548c First User Key \u590d\u5236\u5230\u60a8\u7684 Bedrock \u5ba2\u6237\u7aef\u8bbe\u7f6e\u9875\u9762\u3002</li> </ul> <ul> <li>\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 SSM \u4f1a\u8bdd\u7ba1\u7406\u5668\u8fde\u63a5\u5230 <code>BRConnector</code> EC2 \u5b9e\u4f8b (docs)</li> </ul>"},{"location":"zh/home/deployment/#brconnector","title":"\u66f4\u65b0 BRConnector","text":""},{"location":"zh/home/deployment/#autoupdate-true","title":"AutoUpdate \u4e3a true","text":"<ul> <li>\u68c0\u67e5\u60a8\u7684 ECR \u8bbe\u7f6e\uff0c\u5982\u679c\u5728\u62c9\u53d6\u7f13\u5b58\u9875\u9762\u4e2d\u6709\u89c4\u5219\uff0c\u5219\u60a8\u5df2\u542f\u7528\u6b64\u529f\u80fd\u4ee5\u4f7f\u7528\u4e0a\u6e38\u5b58\u50a8\u5e93\u81ea\u52a8\u66f4\u65b0 ECR \u6620\u50cf\u3002</li> <li>\u8f6c\u5230 codebuild \u9875\u9762\uff0c\u5c06\u89e6\u53d1\u4e00\u4e2a\u9879\u76ee\u5b9a\u671f\u6784\u5efa\u4ee5\u81ea\u52a8\u66f4\u65b0\u60a8\u7684 lambda \u6620\u50cf</li> <li>EC2 \u4e2d\u7684\u6620\u50cf\u5c06\u4f7f\u7528 SSM \u4e2d\u7684\u72b6\u6001\u7ba1\u7406\u5668\u81ea\u52a8\u66f4\u65b0\u3002</li> </ul>"},{"location":"zh/home/deployment/#autoupdate-false","title":"AutoUpdate \u4e3a false","text":"<ul> <li>\u68c0\u67e5\u60a8\u7684 ECR \u8bbe\u7f6e\uff0c\u5982\u679c\u5728\u62c9\u53d6\u7f13\u5b58\u9875\u9762\u4e2d\u6709\u89c4\u5219\uff0c\u5219\u60a8\u5df2\u542f\u7528\u6b64\u529f\u80fd\u4ee5\u4f7f\u7528\u4e0a\u6e38\u5b58\u50a8\u5e93\u81ea\u52a8\u66f4\u65b0 ECR \u6620\u50cf\u3002</li> <li>\u8f6c\u5230 codebuild \u9875\u9762\uff0c\u53ef\u4ee5\u89e6\u53d1\u4e00\u4e2a\u9879\u76ee\u6765\u624b\u52a8\u66f4\u65b0\u60a8\u7684 lambda \u6620\u50cf\u3002\u5355\u51fb\u201c\u5f00\u59cb\u6784\u5efa\u201d\u4ee5\u66f4\u65b0 lambda \u6620\u50cf\u3002</li> <li>\u7531\u4e8e\u672a\u521b\u5efa\u5173\u8054\uff0cEC2 \u4e2d\u7684\u6620\u50cf\u5c06\u4e0d\u4f1a\u4f7f\u7528 SSM \u4e2d\u7684\u72b6\u6001\u7ba1\u7406\u5668\u81ea\u52a8\u66f4\u65b0\u3002\u53c2\u8003 SSM \u4e2d\u7684\u6587\u6863\u4ee5\u624b\u52a8\u5728 EC2 \u4e2d\u6267\u884c\u547d\u4ee4\u3002</li> </ul>"},{"location":"zh/home/deployment/#ecr-cfn","title":"\u672a\u542f\u7528\u62c9\u53d6\u7f13\u5b58\u7684 ECR\uff08\u4ec5\u9002\u7528\u4e8e\u4ee5\u524d\u7684 cfn \u7248\u672c\uff09","text":"<ul> <li> <p>\u5982\u679c\u60a8\u672a\u542f\u7528 ECR \u62c9\u53d6\u7f13\u5b58\uff0c\u8bf7\u6309\u7167\u6b64\u811a\u672c\u624b\u52a8\u66f4\u65b0\u6620\u50cf <pre><code>export AWS_DEFAULT_REGION=us-west-2\nexport ACCOUNT_ID=123456789012\nexport PrivateECRRepository=your_private_repo_name\n\naws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com\n\n# pull/tag/push arm64 image for lambda\ndocker pull --platform=linux/arm64 public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock-lambda\ndocker tag public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock-lambda ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:arm64\ndocker push ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:arm64\n\n# pull/tag/push amd64 image for lambda\ndocker pull --platform=linux/amd64 public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock-lambda\ndocker tag public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock-lambda ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:amd64\ndocker push ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:amd64\n\n# create/push manifest file\ndocker manifest create ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:latest --amend ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:arm64 --amend ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:amd64\ndocker manifest annotate ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:latest ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:arm64 --os linux --arch arm64\ndocker manifest annotate ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:latest ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:amd64 --os linux --arch amd64\ndocker manifest push ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PrivateECRRepository}:latest\n</code></pre></p> </li> <li> <p>\u4f7f\u7528\u6b63\u786e\u7684\u67b6\u6784\u66f4\u65b0 lambda \u6620\u50cf</p> </li> </ul>"},{"location":"zh/home/deployment/#ec2-brconnector","title":"\u8fd0\u884c\u5728 EC2 \u4e0a\u7684 BRConnector","text":"<ul> <li>\u767b\u5f55\u5230 ec2 \u4ee5\u66f4\u65b0\u672c\u5730\u6620\u50cf\u5e76\u91cd\u65b0\u542f\u52a8 brconnector \u5bb9\u5668 <pre><code>aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws\ndocker pull public.ecr.aws/x6u9o2u4/sample-connector-for-bedrock\ndocker restart brconnector\n</code></pre></li> </ul>"},{"location":"zh/home/deployment/#rds-postgresql","title":"\u8fc1\u79fb\u5230\u65b0\u7684 RDS PostgreSQL \u6570\u636e\u5e93","text":"<p>working \u2026</p>"},{"location":"zh/home/development/","title":"\u5f00\u53d1\u6307\u5357","text":"<p>\u672c\u9879\u76ee\u662f\u793a\u4f8b\u4ee3\u7801\uff0c\u5f3a\u70c8\u5efa\u8bae\u60a8\u53c2\u8003\u672c\u9879\u76ee\u81ea\u884c\u5f00\u53d1\u3002</p>"},{"location":"zh/home/development/#_2","title":"\u5f00\u53d1\u6a21\u5f0f","text":"<p>Clone \u672c\u9879\u76ee\u3002</p> <p>\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>npm install\n# or\nyarn\n</code></pre>"},{"location":"zh/home/development/#_3","title":"\u73af\u5883\u53d8\u91cf\u914d\u7f6e","text":"<p>.env \u6587\u4ef6</p> <p>Place it in the root directory of the project.</p> <pre><code>PGSQL_HOST=127.0.0.1\nPGSQL_DATABASE=brconnector_db\nPGSQL_USER=postgres\nPGSQL_PASSWORD=mysecretpassword\nPGSQL_DEBUG_MODE=ok\nADMIN_API_KEY=br_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nDEBUG_MODE=true\n</code></pre> <p>The connector supports the following environment variables:</p> Key Required Default value Description ADMIN_API_KEY yes You need to set this value to generate the first API key. PGSQL_HOST no The address of the PostgreSQL. If the database is not configured, then the connector is just a pure proxy. PGSQL_PORT no 5432 The port of the PostgreSQL. PGSQL_DATABASE no The name of the PostgreSQL database. PGSQL_USER no The login user for the PostgreSQL. PGSQL_PASSWORD no The password user for the PostgreSQL. PGSQL_MAX no 80 The maximum connection pool size for PostgreSQL. PGSQL_DEBUG_MODE no false If you set this parameter, it will print out the SQL statements and parameters in the console. AWS_ACCESS_KEY_ID no If your application has been authorized through an IAM policy, you don\u2019t need to set this variable. AWS_SECRET_ACCESS_KEY no If your application has been authorized through an IAM policy, you don\u2019t need to set this variable. AWS_DEFAULT_REGION no \u2018us-east-1\u2019 DEBUG_MODE no false If you set this parameter, it will print out a lot of debugging information in the console. DISABLE_UI no false Setting this value will not publish the front-end UI. SMTP_HOST no SMTP server host address. Setting up an SMTP Server allows you to send your API key directly to the user\u2019s email inbox. SMTP_PORT no 465 SMTP server port number SMTP_USER no SMTP server username SMTP_PASS no SMTP server password SMPT_FROM no SMTP sender email address, your SMTP server maybe verify this"},{"location":"zh/home/development/#_4","title":"\u542f\u52a8\u540e\u53f0","text":"<pre><code>npm run dev\n# or\nyarn dev\n</code></pre> <p>If you have configured postgres, the tables will be created automatically.</p>"},{"location":"zh/home/development/#_5","title":"\u542f\u52a8\u7ba1\u7406\u754c\u9762","text":"<pre><code>npm run dev-ui\n# or\nyarn dev-ui\n</code></pre>"},{"location":"zh/home/development/#_6","title":"\u6784\u5efa","text":""},{"location":"zh/home/quick-start/","title":"\u5feb\u901f\u542f\u52a8","text":""},{"location":"zh/providers/aws-executor/","title":"aws-executor: AWS \u547d\u4ee4\u884c\u6267\u884c\u5668","text":"<p>With this Provider, you can execute AWS command using natural language and get the execution results.</p> <p>The role for executing AWS commands and the role for running BRConnector are currently the same, so you need to grant the appropriate permissions to the current role.</p> <p>Info</p> <p>Do not grant write permissions to critical resources, as the command lines parsed by the current AI are not stable. However, you can still refer to the command lines suggested by the AI.</p>"},{"location":"zh/providers/aws-executor/#model-configuration","title":"Model configuration","text":"<p>The parameter configuration is as follows:</p> <p>Name: some-model</p> <p>Provider: aws-executor</p> <p>Configuration:</p> <pre><code>{\n  \"localLlmModel\": \"claude-3-sonnet\"\n}\n</code></pre> <p>localLlmModel must be configured as a model that supports function calling and already exists in BRConnector.</p> <p>[!Note] You need to configure a claude3+ model provided by the bedrock-converse provider, as other models do not yet have the capability for function calling. The default claude3 model in the system is not driven by converse. If you use these models, you need to update the original configuration to the bedrock-converse provider. Please note to modify the key \u2018model_id\u2019 to \u2018modelId\u2019.</p> <p>And You must install aws cli v2 in the BRConnector host.</p>"},{"location":"zh/providers/bedrock-converse/","title":"bedrock-converse: LLM \u7edf\u4e00\u8c03\u7528","text":""},{"location":"zh/providers/bedrock-knowledge-base/","title":"bedrock-knowledge-base: Bedrock \u77e5\u8bc6\u5e93","text":""},{"location":"zh/providers/ollama/","title":"ollama: \u81ea\u5efa\u6a21\u578b","text":""},{"location":"zh/providers/painter/","title":"painter: \u4f7f\u7528 Bedrock \u753b\u56fe\u6a21\u578b","text":""},{"location":"zh/providers/sagemaker-lmi/","title":"sagemaker-lmi: \u4f7f\u7528 Sagemaker \u81ea\u5efa\u6a21\u578b","text":""},{"location":"zh/providers/web-miner/","title":"web-miner\uff1a\u641c\u7d22\u4e92\u8054\u7f51","text":"<p>\u672c Provider \u53ef\u4ee5\u5c06\u60a8\u7684\u95ee\u9898\u8f6c\u5316\u4e3a\u641c\u7d22\u5173\u952e\u8bcd\uff0c\u901a\u8fc7\u641c\u7d22\u5f15\u64ce\u83b7\u53d6\u7ed3\u679c\uff0c\u7136\u540e\u5c06\u5176\u603b\u7ed3\u6210\u76f8\u5e94\u7684\u7b54\u6848\u3002\u652f\u6301\u591a\u8f6e\u5bf9\u8bdd\u3002</p> <p>Tip</p> <p>\u4e0d\u8981\u95ee\u592a\u591a\u8f6e\u6b21\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u8fd9\u4e2a Provider \u4f1a\u628a\u4f60\u4e4b\u524d\u7684\u63d0\u793a\u603b\u7ed3\u6210\u4e3a\u5173\u952e\u8bcd\u5e76\u8fdb\u884c\u641c\u7d22\u3002</p> <p>\u5728 BRClient \u4e2d\uff0c\u592a\u957f\u4fe1\u606f\u4f1a\u88ab\u603b\u7ed3\u6210\u5355\u4e00\u5386\u53f2\u8bb0\u5f55\uff0c\u4ece\u800c\u4e22\u5931\u6700\u65e9\u7684\u7528\u6237\u8f93\u5165\uff0c\u8fd9\u4f1a\u5bfc\u81f4 AI \u56de\u7b54\u7684\u7ed3\u679c\u548c\u60a8\u60f3\u8981\u7684\u76f8\u53bb\u751a\u8fdc\u3002</p>"},{"location":"zh/providers/web-miner/#_1","title":"\u6a21\u578b\u914d\u7f6e","text":"<p>\u53c2\u6570\u914d\u7f6e\u5982\u4e0b:</p> <p>Name: some-model</p> <p>Provider: web-miner</p> <p>Configuration:</p> <pre><code>{\n  \"sites\": [\n    \"aws.amazon.com\",\n    \"www.amazonaws.cn\",\n    \"repost.aws\",\n    \"stackoverflow.com\"\n  ],\n  \"localLlmModel\": \"claude-3-sonnet\",\n  \"searxng\": {\n    \"host\": \"http://127.0.0.1:8081/\"\n  },\n  \"serpapi\": {\n    \"apiKey\": \"xxx......\",\n    \"engine\": \"google\"\n  },\n  \"google\": {\n    \"googleAPIKey\": \"AIxxxxxx_xxxxxxxx\",\n    \"googleCSECX\": \"00xxxc000a2xxxxx\"\n  }\n}\n</code></pre> <ul> <li>sites: \u53ea\u4ece\u8fd9\u4e9b\u7f51\u7ad9\u91cc\u8fdb\u884c\u641c\u7d22\uff0c\u53ef\u4ee5\u4e0d\u6307\u5b9a\u6b64\u53c2\u6570\u3002</li> <li>localLlmModel: \u5fc5\u987b\u914d\u7f6e\u4e3a\u652f\u6301\u51fd\u6570\u8c03\u7528\u7684\u6a21\u578b\uff0c\u5e76\u4e14\u5df2\u5b58\u5728\u4e8e BRConnector \u4e2d\u3002</li> <li>\u652f\u6301\u4e0b\u9762\u7684\u8fd9\u4e9b\u641c\u7d22\u5f15\u64ce\u6216\u96c6\u5408\u5de5\u5177\u4e2d\u7684\u4e00\u4e2a\uff0c\u4f18\u5148\u7ea7\u5982\u4e0b:<ul> <li>searxng</li> <li>SerpAPI</li> <li>google</li> </ul> </li> </ul>"},{"location":"zh/providers/web-miner/#_2","title":"\u641c\u7d22\u914d\u7f6e","text":""},{"location":"zh/providers/web-miner/#searxng","title":"searxng","text":"<p>\u8be6\u60c5\u8bf7\u8bbf\u95ee https://docs.searxng.org/\u3002</p> <p>\u521b\u5efa\u4e00\u4e2a settings.yml \u6587\u4ef6\uff0c\u589e\u52a0 json \u8f93\u51fa\u683c\u5f0f\u3002</p> <pre><code>use_default_settings: true\nserver:\n    secret_key: \"some-Other-PWD\"   # change this!\n    bind_address: \"0.0.0.0\"\nsearch:\n  formats:\n\n    - html\n    - json\n</code></pre> <p>\u542f\u52a8 searxng:</p> <pre><code>docker run --rm -d -p 8081:8080 \\\n  -v ./settings.yml:/etc/searxng/settings.yml \\\n  -e \"INSTANCE_NAME=searxng\" searxng/searxng\n</code></pre> <p>\u8fd9\u6837\u90e8\u7f72\u51fa\u6765\u7684 searxng \u4e3b\u673a\u5730\u5740\u662f: http://127.0.0.1:8081/\uff0c\u8bf7\u5c06\u5176\u914d\u7f6e\u5230 searxng \u7684 host \u8282\u70b9\u4e2d\u3002</p>"},{"location":"zh/providers/web-miner/#serpapi","title":"SerpAPI","text":"<p>\u8be6\u60c5\u8bf7\u8bbf\u95ee https://serpapi.com/\u3002</p> <p>\u767b\u5f55\u540e\uff0c\u60a8\u53ef\u4ee5\u5728\u5176\u663e\u773c\u4f4d\u7f6e\u770b\u5230 API Key\u3002</p> <p>engine \u53c2\u6570\u652f\u6301\u5982\u4e0b\u8fd9\u4e9b\uff0c\u9ed8\u8ba4\u662f google\uff1a</p> <ul> <li>google</li> <li>bing</li> <li>baidu</li> <li>duckduckgo</li> <li>yahoo</li> <li>yandex </li> <li>yelp</li> <li>naver</li> </ul> <p>SerpAPI \u4e0d\u514d\u8d39</p> <p>\u8bf7\u6ce8\u610f\uff1a\u8d85\u8fc7\u6bcf\u6708\u7684\u9650\u989d\u4f1a\u88ab\u6536\u8d39\u3002</p>"},{"location":"zh/providers/web-miner/#google","title":"Google","text":"<p>\u4f7f\u7528 Google \u81ea\u5b9a\u4e49\u641c\u7d22\u5f15\u64ce\uff0c\u9700\u8981\u5982\u4e0b 2 \u4e2a Key\uff0c\u8bf7\u70b9\u51fb\u76f8\u5e94\u94fe\u63a5\u521b\u5efa\uff1a</p> <ul> <li> <p>\u7533\u8bf7 googleAPIKey</p> </li> <li> <p>\u7533\u8bf7 googleCSECX</p> </li> </ul> <p>Google CSE \u4e0d\u514d\u8d39</p> <p>\u8bf7\u6ce8\u610f\uff1a\u8d85\u8fc7\u6bcf\u65e5\u7684\u9650\u989d\u4f1a\u88ab\u6536\u8d39\u3002</p>"},{"location":"zh/providers/web-miner/#brclient","title":"\u5728 BRClient \u4e2d\u7684\u622a\u56fe","text":""}]}